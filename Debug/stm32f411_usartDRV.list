
stm32f411_usartDRV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d48  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004ee8  08004ee8  00005ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f28  08004f28  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f28  08004f28  00005f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f30  08004f30  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f30  08004f30  00005f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f34  08004f34  00005f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004f38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  2000005c  08004f94  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08004f94  000063b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3cb  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ad  00000000  00000000  00011457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00013908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000095e  00000000  00000000  000145a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015254  00000000  00000000  00014efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b938  00000000  00000000  0002a152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074ee0  00000000  00000000  00035a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa96a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c0  00000000  00000000  000aa9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ae170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ed0 	.word	0x08004ed0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004ed0 	.word	0x08004ed0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004d4:	4b04      	ldr	r3, [pc, #16]	@ (80004e8 <__NVIC_GetPriorityGrouping+0x18>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	0a1b      	lsrs	r3, r3, #8
 80004da:	f003 0307 	and.w	r3, r3, #7
}
 80004de:	4618      	mov	r0, r3
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	e000ed00 	.word	0xe000ed00

080004ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	db0b      	blt.n	8000516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	f003 021f 	and.w	r2, r3, #31
 8000504:	4907      	ldr	r1, [pc, #28]	@ (8000524 <__NVIC_EnableIRQ+0x38>)
 8000506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050a:	095b      	lsrs	r3, r3, #5
 800050c:	2001      	movs	r0, #1
 800050e:	fa00 f202 	lsl.w	r2, r0, r2
 8000512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e000e100 	.word	0xe000e100

08000528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	6039      	str	r1, [r7, #0]
 8000532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000538:	2b00      	cmp	r3, #0
 800053a:	db0a      	blt.n	8000552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	b2da      	uxtb	r2, r3
 8000540:	490c      	ldr	r1, [pc, #48]	@ (8000574 <__NVIC_SetPriority+0x4c>)
 8000542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000546:	0112      	lsls	r2, r2, #4
 8000548:	b2d2      	uxtb	r2, r2
 800054a:	440b      	add	r3, r1
 800054c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000550:	e00a      	b.n	8000568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4908      	ldr	r1, [pc, #32]	@ (8000578 <__NVIC_SetPriority+0x50>)
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	f003 030f 	and.w	r3, r3, #15
 800055e:	3b04      	subs	r3, #4
 8000560:	0112      	lsls	r2, r2, #4
 8000562:	b2d2      	uxtb	r2, r2
 8000564:	440b      	add	r3, r1
 8000566:	761a      	strb	r2, [r3, #24]
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	e000e100 	.word	0xe000e100
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800057c:	b480      	push	{r7}
 800057e:	b089      	sub	sp, #36	@ 0x24
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f003 0307 	and.w	r3, r3, #7
 800058e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	f1c3 0307 	rsb	r3, r3, #7
 8000596:	2b04      	cmp	r3, #4
 8000598:	bf28      	it	cs
 800059a:	2304      	movcs	r3, #4
 800059c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	3304      	adds	r3, #4
 80005a2:	2b06      	cmp	r3, #6
 80005a4:	d902      	bls.n	80005ac <NVIC_EncodePriority+0x30>
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	3b03      	subs	r3, #3
 80005aa:	e000      	b.n	80005ae <NVIC_EncodePriority+0x32>
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b0:	f04f 32ff 	mov.w	r2, #4294967295
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	43da      	mvns	r2, r3
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	401a      	ands	r2, r3
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c4:	f04f 31ff 	mov.w	r1, #4294967295
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	fa01 f303 	lsl.w	r3, r1, r3
 80005ce:	43d9      	mvns	r1, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d4:	4313      	orrs	r3, r2
         );
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3724      	adds	r7, #36	@ 0x24
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005ec:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005f0:	4907      	ldr	r1, [pc, #28]	@ (8000610 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005f8:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4013      	ands	r3, r2
 8000600:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000602:	68fb      	ldr	r3, [r7, #12]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	40023800 	.word	0x40023800

08000614 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800061c:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <LL_APB2_GRP1_EnableClock+0x2c>)
 800061e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000620:	4907      	ldr	r1, [pc, #28]	@ (8000640 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4313      	orrs	r3, r2
 8000626:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000628:	4b05      	ldr	r3, [pc, #20]	@ (8000640 <LL_APB2_GRP1_EnableClock+0x2c>)
 800062a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4013      	ands	r3, r2
 8000630:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000632:	68fb      	ldr	r3, [r7, #12]
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	40023800 	.word	0x40023800

08000644 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f043 0201 	orr.w	r2, r3, #1
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	601a      	str	r2, [r3, #0]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	601a      	str	r2, [r3, #0]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	689b      	ldr	r3, [r3, #8]
 8000692:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000696:	f023 0307 	bic.w	r3, r3, #7
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	431a      	orrs	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	609a      	str	r2, [r3, #8]
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	431a      	orrs	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	605a      	str	r2, [r3, #4]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	609a      	str	r2, [r3, #8]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f06f 0201 	mvn.w	r2, #1
 8000702:	611a      	str	r2, [r3, #16]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	2b01      	cmp	r3, #1
 8000722:	d101      	bne.n	8000728 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000724:	2301      	movs	r3, #1
 8000726:	e000      	b.n	800072a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	041a      	lsls	r2, r3, #16
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	619a      	str	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	4013      	ands	r3, r2
 800076a:	041a      	lsls	r2, r3, #16
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	43d9      	mvns	r1, r3
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	400b      	ands	r3, r1
 8000774:	431a      	orrs	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	619a      	str	r2, [r3, #24]
}
 800077a:	bf00      	nop
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
	...

08000788 <MainDev_Init>:
static void GPIO_init(void);
static void blink();
static void RxTxInLoop(void* pvParameters);

void MainDev_Init(MainDev* this)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af02      	add	r7, sp, #8
 800078e:	6078      	str	r0, [r7, #4]
	pMainDev = this;
 8000790:	4a0f      	ldr	r2, [pc, #60]	@ (80007d0 <MainDev_Init+0x48>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6013      	str	r3, [r2, #0]
	this->TickCnt = 0;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]

	TIM_init();
 800079c:	f000 f884 	bl	80008a8 <TIM_init>
	GPIO_init();
 80007a0:	f000 f856 	bl	8000850 <GPIO_init>
	USARTDrv_Init(&this->usartDrv);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3304      	adds	r3, #4
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fcd3 	bl	8001154 <USARTDrv_Init>

	xTaskCreate(RxTxInLoop,
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	3394      	adds	r3, #148	@ 0x94
 80007b2:	9301      	str	r3, [sp, #4]
 80007b4:	2307      	movs	r3, #7
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007be:	4905      	ldr	r1, [pc, #20]	@ (80007d4 <MainDev_Init+0x4c>)
 80007c0:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MainDev_Init+0x50>)
 80007c2:	f002 f929 	bl	8002a18 <xTaskCreate>
					"MD Task",
					FRTOS_CFG_MAINDEV_SDEPTH,	//??
					(void*) this,
					FRTOS_CFG_MAINDEV_PRIORITY, //??
					&this->xTask);
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000078 	.word	0x20000078
 80007d4:	08004ee8 	.word	0x08004ee8
 80007d8:	080007fd 	.word	0x080007fd

080007dc <MainDev_MainLoopProc>:

void MainDev_MainLoopProc(MainDev* this)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	pMainDev = this;
 80007e4:	4a04      	ldr	r2, [pc, #16]	@ (80007f8 <MainDev_MainLoopProc+0x1c>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6013      	str	r3, [r2, #0]

	blink();
 80007ea:	f000 f8b3 	bl	8000954 <blink>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000078 	.word	0x20000078

080007fc <RxTxInLoop>:
void MainDev_DeInit(MainDev* this)
{

}

static void RxTxInLoop(void* pvParameters){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	MainDev* this = (MainDev*) pvParameters;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	617b      	str	r3, [r7, #20]

	while(!this->killTask){
 8000808:	e010      	b.n	800082c <RxTxInLoop+0x30>
		uint8_t str[] = "dupa";
 800080a:	4a10      	ldr	r2, [pc, #64]	@ (800084c <RxTxInLoop+0x50>)
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000814:	6018      	str	r0, [r3, #0]
 8000816:	3304      	adds	r3, #4
 8000818:	7019      	strb	r1, [r3, #0]
		USARTDrv_TX(str);
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fcd6 	bl	80011d0 <USARTDrv_TX>
		//USARTDrv_RX();
		vTaskDelay(1000);
 8000824:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000828:	f002 fae4 	bl	8002df4 <vTaskDelay>
	while(!this->killTask){
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0e9      	beq.n	800080a <RxTxInLoop+0xe>
	}
	this->xTask = NULL;
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	2200      	movs	r2, #0
 800083a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	vTaskDelete( NULL );
 800083e:	2000      	movs	r0, #0
 8000840:	f002 fa36 	bl	8002cb0 <vTaskDelete>
}
 8000844:	bf00      	nop
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	08004ef0 	.word	0x08004ef0

08000850 <GPIO_init>:



static void GPIO_init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
 8000864:	615a      	str	r2, [r3, #20]
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000866:	2008      	movs	r0, #8
 8000868:	f7ff febc 	bl	80005e4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff feb9 	bl	80005e4 <LL_AHB1_GRP1_EnableClock>

	LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_14|LL_GPIO_PIN_15);
 8000872:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000876:	480b      	ldr	r0, [pc, #44]	@ (80008a4 <GPIO_init+0x54>)
 8000878:	f7ff ff5d 	bl	8000736 <LL_GPIO_ResetOutputPin>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800087c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000880:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000882:	2301      	movs	r3, #1
 8000884:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000892:	463b      	mov	r3, r7
 8000894:	4619      	mov	r1, r3
 8000896:	4803      	ldr	r0, [pc, #12]	@ (80008a4 <GPIO_init+0x54>)
 8000898:	f003 fc23 	bl	80040e2 <LL_GPIO_Init>
}
 800089c:	bf00      	nop
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40020c00 	.word	0x40020c00

080008a8 <TIM_init>:

static void TIM_init(){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80008bc:	2001      	movs	r0, #1
 80008be:	f7ff fea9 	bl	8000614 <LL_APB2_GRP1_EnableClock>

	NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80008c2:	f7ff fe05 	bl	80004d0 <__NVIC_GetPriorityGrouping>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2200      	movs	r2, #0
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fe55 	bl	800057c <NVIC_EncodePriority>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4619      	mov	r1, r3
 80008d6:	2018      	movs	r0, #24
 80008d8:	f7ff fe26 	bl	8000528 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80008dc:	2018      	movs	r0, #24
 80008de:	f7ff fe05 	bl	80004ec <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80008e2:	f7ff fdf5 	bl	80004d0 <__NVIC_GetPriorityGrouping>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fe45 	bl	800057c <NVIC_EncodePriority>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4619      	mov	r1, r3
 80008f6:	2019      	movs	r0, #25
 80008f8:	f7ff fe16 	bl	8000528 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008fc:	2019      	movs	r0, #25
 80008fe:	f7ff fdf5 	bl	80004ec <__NVIC_EnableIRQ>
	TIM_InitStruct.Prescaler = 6000;
 8000902:	f241 7370 	movw	r3, #6000	@ 0x1770
 8000906:	80bb      	strh	r3, [r7, #4]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
	TIM_InitStruct.Autoreload = 999;
 800090c:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000910:	60fb      	str	r3, [r7, #12]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
	TIM_InitStruct.RepetitionCounter = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
	LL_TIM_Init(TIM1, &TIM_InitStruct);
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	480c      	ldr	r0, [pc, #48]	@ (8000950 <TIM_init+0xa8>)
 8000920:	f003 fdd4 	bl	80044cc <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM1);
 8000924:	480a      	ldr	r0, [pc, #40]	@ (8000950 <TIM_init+0xa8>)
 8000926:	f7ff fe9d 	bl	8000664 <LL_TIM_DisableARRPreload>
	LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800092a:	2100      	movs	r1, #0
 800092c:	4808      	ldr	r0, [pc, #32]	@ (8000950 <TIM_init+0xa8>)
 800092e:	f7ff fea9 	bl	8000684 <LL_TIM_SetClockSource>
	LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_UPDATE);
 8000932:	2120      	movs	r1, #32
 8000934:	4806      	ldr	r0, [pc, #24]	@ (8000950 <TIM_init+0xa8>)
 8000936:	f7ff feba 	bl	80006ae <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM1);
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <TIM_init+0xa8>)
 800093c:	f7ff feca 	bl	80006d4 <LL_TIM_DisableMasterSlaveMode>
	LL_TIM_EnableCounter(TIM1);
 8000940:	4803      	ldr	r0, [pc, #12]	@ (8000950 <TIM_init+0xa8>)
 8000942:	f7ff fe7f 	bl	8000644 <LL_TIM_EnableCounter>
}
 8000946:	bf00      	nop
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40010000 	.word	0x40010000

08000954 <blink>:

static void blink(){
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	if (LL_TIM_IsActiveFlag_UPDATE(TIM1)) {
 8000958:	4807      	ldr	r0, [pc, #28]	@ (8000978 <blink+0x24>)
 800095a:	f7ff fed9 	bl	8000710 <LL_TIM_IsActiveFlag_UPDATE>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d007      	beq.n	8000974 <blink+0x20>
				LL_TIM_ClearFlag_UPDATE(TIM1);
 8000964:	4804      	ldr	r0, [pc, #16]	@ (8000978 <blink+0x24>)
 8000966:	f7ff fec5 	bl	80006f4 <LL_TIM_ClearFlag_UPDATE>
			  	LL_GPIO_TogglePin(GPIOD, LL_GPIO_PIN_15);
 800096a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800096e:	4803      	ldr	r0, [pc, #12]	@ (800097c <blink+0x28>)
 8000970:	f7ff fef0 	bl	8000754 <LL_GPIO_TogglePin>
		}
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40010000 	.word	0x40010000
 800097c:	40020c00 	.word	0x40020c00

08000980 <__NVIC_EnableIRQ>:
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	2b00      	cmp	r3, #0
 8000990:	db0b      	blt.n	80009aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	f003 021f 	and.w	r2, r3, #31
 8000998:	4907      	ldr	r1, [pc, #28]	@ (80009b8 <__NVIC_EnableIRQ+0x38>)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	095b      	lsrs	r3, r3, #5
 80009a0:	2001      	movs	r0, #1
 80009a2:	fa00 f202 	lsl.w	r2, r0, r2
 80009a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000e100 	.word	0xe000e100

080009bc <__NVIC_SetPriority>:
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	db0a      	blt.n	80009e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	490c      	ldr	r1, [pc, #48]	@ (8000a08 <__NVIC_SetPriority+0x4c>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	0112      	lsls	r2, r2, #4
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	440b      	add	r3, r1
 80009e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80009e4:	e00a      	b.n	80009fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4908      	ldr	r1, [pc, #32]	@ (8000a0c <__NVIC_SetPriority+0x50>)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	f003 030f 	and.w	r3, r3, #15
 80009f2:	3b04      	subs	r3, #4
 80009f4:	0112      	lsls	r2, r2, #4
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	440b      	add	r3, r1
 80009fa:	761a      	strb	r2, [r3, #24]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000e100 	.word	0xe000e100
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a4c <LL_DMA_EnableStream+0x3c>)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4413      	add	r3, r2
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4908      	ldr	r1, [pc, #32]	@ (8000a4c <LL_DMA_EnableStream+0x3c>)
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	440a      	add	r2, r1
 8000a30:	7812      	ldrb	r2, [r2, #0]
 8000a32:	4611      	mov	r1, r2
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	440a      	add	r2, r1
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6013      	str	r3, [r2, #0]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	08004f08 	.word	0x08004f08

08000a50 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a8c <LL_DMA_DisableStream+0x3c>)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4908      	ldr	r1, [pc, #32]	@ (8000a8c <LL_DMA_DisableStream+0x3c>)
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	440a      	add	r2, r1
 8000a70:	7812      	ldrb	r2, [r2, #0]
 8000a72:	4611      	mov	r1, r2
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	440a      	add	r2, r1
 8000a78:	f023 0301 	bic.w	r3, r3, #1
 8000a7c:	6013      	str	r3, [r2, #0]
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	08004f08 	.word	0x08004f08

08000a90 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad4 <LL_DMA_SetDataTransferDirection+0x44>)
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8000ab0:	4908      	ldr	r1, [pc, #32]	@ (8000ad4 <LL_DMA_SetDataTransferDirection+0x44>)
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	440b      	add	r3, r1
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	440b      	add	r3, r1
 8000abe:	4619      	mov	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	600b      	str	r3, [r1, #0]
}
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	08004f08 	.word	0x08004f08

08000ad8 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR));
 8000ae2:	4a08      	ldr	r2, [pc, #32]	@ (8000b04 <LL_DMA_GetDataTransferDirection+0x2c>)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4413      	add	r3, r2
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	08004f08 	.word	0x08004f08

08000b08 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000b14:	4a0d      	ldr	r2, [pc, #52]	@ (8000b4c <LL_DMA_SetMode+0x44>)
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	4413      	add	r3, r2
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	4413      	add	r3, r2
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8000b28:	4908      	ldr	r1, [pc, #32]	@ (8000b4c <LL_DMA_SetMode+0x44>)
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	440b      	add	r3, r1
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	440b      	add	r3, r1
 8000b36:	4619      	mov	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	600b      	str	r3, [r1, #0]
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	08004f08 	.word	0x08004f08

08000b50 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <LL_DMA_SetPeriphIncMode+0x44>)
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	4413      	add	r3, r2
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4413      	add	r3, r2
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8000b70:	4908      	ldr	r1, [pc, #32]	@ (8000b94 <LL_DMA_SetPeriphIncMode+0x44>)
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	440b      	add	r3, r1
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	440b      	add	r3, r1
 8000b7e:	4619      	mov	r1, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	600b      	str	r3, [r1, #0]
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	08004f08 	.word	0x08004f08

08000b98 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bdc <LL_DMA_SetMemoryIncMode+0x44>)
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	4413      	add	r3, r2
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000bb8:	4908      	ldr	r1, [pc, #32]	@ (8000bdc <LL_DMA_SetMemoryIncMode+0x44>)
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	440b      	add	r3, r1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	440b      	add	r3, r1
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	600b      	str	r3, [r1, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	08004f08 	.word	0x08004f08

08000be0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000bec:	4a0d      	ldr	r2, [pc, #52]	@ (8000c24 <LL_DMA_SetPeriphSize+0x44>)
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8000c00:	4908      	ldr	r1, [pc, #32]	@ (8000c24 <LL_DMA_SetPeriphSize+0x44>)
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	440b      	add	r3, r1
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	440b      	add	r3, r1
 8000c0e:	4619      	mov	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	600b      	str	r3, [r1, #0]
}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	08004f08 	.word	0x08004f08

08000c28 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000c34:	4a0d      	ldr	r2, [pc, #52]	@ (8000c6c <LL_DMA_SetMemorySize+0x44>)
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	4413      	add	r3, r2
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4413      	add	r3, r2
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8000c48:	4908      	ldr	r1, [pc, #32]	@ (8000c6c <LL_DMA_SetMemorySize+0x44>)
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	440b      	add	r3, r1
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	440b      	add	r3, r1
 8000c56:	4619      	mov	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	600b      	str	r3, [r1, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	08004f08 	.word	0x08004f08

08000c70 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	4413      	add	r3, r2
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4413      	add	r3, r2
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000c90:	4908      	ldr	r1, [pc, #32]	@ (8000cb4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	440b      	add	r3, r1
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	440b      	add	r3, r1
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	600b      	str	r3, [r1, #0]
}
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	08004f08 	.word	0x08004f08

08000cb8 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cfc <LL_DMA_SetDataLength+0x44>)
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	0c1b      	lsrs	r3, r3, #16
 8000cd6:	041b      	lsls	r3, r3, #16
 8000cd8:	4908      	ldr	r1, [pc, #32]	@ (8000cfc <LL_DMA_SetDataLength+0x44>)
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	440a      	add	r2, r1
 8000cde:	7812      	ldrb	r2, [r2, #0]
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	440a      	add	r2, r1
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	604b      	str	r3, [r1, #4]
}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	08004f08 	.word	0x08004f08

08000d00 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval Between 0 to 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef* DMAx, uint32_t Stream)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 8000d0a:	4a07      	ldr	r2, [pc, #28]	@ (8000d28 <LL_DMA_GetDataLength+0x28>)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4413      	add	r3, r2
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	b29b      	uxth	r3, r3
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	08004f08 	.word	0x08004f08

08000d2c <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000d38:	4a0d      	ldr	r2, [pc, #52]	@ (8000d70 <LL_DMA_SetChannelSelection+0x44>)
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4413      	add	r3, r2
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8000d4c:	4908      	ldr	r1, [pc, #32]	@ (8000d70 <LL_DMA_SetChannelSelection+0x44>)
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	440b      	add	r3, r1
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	440b      	add	r3, r1
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]
}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	08004f08 	.word	0x08004f08

08000d74 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000db0 <LL_DMA_DisableFifoMode+0x3c>)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	4908      	ldr	r1, [pc, #32]	@ (8000db0 <LL_DMA_DisableFifoMode+0x3c>)
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	440a      	add	r2, r1
 8000d94:	7812      	ldrb	r2, [r2, #0]
 8000d96:	4611      	mov	r1, r2
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	440a      	add	r2, r1
 8000d9c:	f023 0304 	bic.w	r3, r3, #4
 8000da0:	6153      	str	r3, [r2, #20]
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	08004f08 	.word	0x08004f08

08000db4 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
 8000dc0:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	2b40      	cmp	r3, #64	@ 0x40
 8000dc6:	d114      	bne.n	8000df2 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 8000dc8:	4a17      	ldr	r2, [pc, #92]	@ (8000e28 <LL_DMA_ConfigAddresses+0x74>)
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	4413      	add	r3, r2
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 8000ddc:	4a12      	ldr	r2, [pc, #72]	@ (8000e28 <LL_DMA_ConfigAddresses+0x74>)
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	4413      	add	r3, r2
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4413      	add	r3, r2
 8000dea:	461a      	mov	r2, r3
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 8000df0:	e013      	b.n	8000e1a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 8000df2:	4a0d      	ldr	r2, [pc, #52]	@ (8000e28 <LL_DMA_ConfigAddresses+0x74>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4413      	add	r3, r2
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	461a      	mov	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 8000e06:	4a08      	ldr	r2, [pc, #32]	@ (8000e28 <LL_DMA_ConfigAddresses+0x74>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	461a      	mov	r2, r3
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	60d3      	str	r3, [r2, #12]
}
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	08004f08 	.word	0x08004f08

08000e2c <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll LISR  TCIF1    LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000e40:	bf0c      	ite	eq
 8000e42:	2301      	moveq	r3, #1
 8000e44:	2300      	movne	r3, #0
 8000e46:	b2db      	uxtb	r3, r3
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll LIFCR  CTCIF1    LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e62:	609a      	str	r2, [r3, #8]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
 8000e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000eac <LL_DMA_EnableIT_TE+0x3c>)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4413      	add	r3, r2
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4908      	ldr	r1, [pc, #32]	@ (8000eac <LL_DMA_EnableIT_TE+0x3c>)
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	440a      	add	r2, r1
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	4611      	mov	r1, r2
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	440a      	add	r2, r1
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6013      	str	r3, [r2, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	08004f08 	.word	0x08004f08

08000eb0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000eba:	4a0c      	ldr	r2, [pc, #48]	@ (8000eec <LL_DMA_EnableIT_TC+0x3c>)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4908      	ldr	r1, [pc, #32]	@ (8000eec <LL_DMA_EnableIT_TC+0x3c>)
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	440a      	add	r2, r1
 8000ed0:	7812      	ldrb	r2, [r2, #0]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	440a      	add	r2, r1
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	6013      	str	r3, [r2, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	08004f08 	.word	0x08004f08

08000ef0 <LL_AHB1_GRP1_EnableClock>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000efa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000efc:	4907      	ldr	r1, [pc, #28]	@ (8000f1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	40023800 	.word	0x40023800

08000f20 <LL_APB2_GRP1_EnableClock>:
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f2c:	4907      	ldr	r1, [pc, #28]	@ (8000f4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	40023800 	.word	0x40023800

08000f50 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	60da      	str	r2, [r3, #12]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	615a      	str	r2, [r3, #20]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fac:	2b40      	cmp	r3, #64	@ 0x40
 8000fae:	bf0c      	ite	eq
 8000fb0:	2301      	moveq	r3, #1
 8000fb2:	2300      	movne	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8000fd0:	601a      	str	r2, [r3, #0]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b089      	sub	sp, #36	@ 0x24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	330c      	adds	r3, #12
 8000fea:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	e853 3f00 	ldrex	r3, [r3]
 8000ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	f043 0310 	orr.w	r3, r3, #16
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	330c      	adds	r3, #12
 8001000:	69fa      	ldr	r2, [r7, #28]
 8001002:	61ba      	str	r2, [r7, #24]
 8001004:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001006:	6979      	ldr	r1, [r7, #20]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	e841 2300 	strex	r3, r2, [r1]
 800100e:	613b      	str	r3, [r7, #16]
   return(result);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1e7      	bne.n	8000fe6 <LL_USART_EnableIT_IDLE+0x8>
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	3724      	adds	r7, #36	@ 0x24
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	@ 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	330c      	adds	r3, #12
 8001030:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	e853 3f00 	ldrex	r3, [r3]
 8001038:	60bb      	str	r3, [r7, #8]
   return(result);
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	f043 0320 	orr.w	r3, r3, #32
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	330c      	adds	r3, #12
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	61ba      	str	r2, [r7, #24]
 800104a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800104c:	6979      	ldr	r1, [r7, #20]
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	e841 2300 	strex	r3, r2, [r1]
 8001054:	613b      	str	r3, [r7, #16]
   return(result);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1e7      	bne.n	800102c <LL_USART_EnableIT_RXNE+0x8>
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3724      	adds	r7, #36	@ 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 800106a:	b480      	push	{r7}
 800106c:	b089      	sub	sp, #36	@ 0x24
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	330c      	adds	r3, #12
 8001076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	e853 3f00 	ldrex	r3, [r3]
 800107e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	330c      	adds	r3, #12
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	61ba      	str	r2, [r7, #24]
 8001090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001092:	6979      	ldr	r1, [r7, #20]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	e841 2300 	strex	r3, r2, [r1]
 800109a:	613b      	str	r3, [r7, #16]
   return(result);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1e7      	bne.n	8001072 <LL_USART_EnableIT_TC+0x8>
}
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	3724      	adds	r7, #36	@ 0x24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	@ 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3314      	adds	r3, #20
 80010bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	e853 3f00 	ldrex	r3, [r3]
 80010c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3314      	adds	r3, #20
 80010d2:	69fa      	ldr	r2, [r7, #28]
 80010d4:	61ba      	str	r2, [r7, #24]
 80010d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010d8:	6979      	ldr	r1, [r7, #20]
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	e841 2300 	strex	r3, r2, [r1]
 80010e0:	613b      	str	r3, [r7, #16]
   return(result);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1e7      	bne.n	80010b8 <LL_USART_EnableDMAReq_RX+0x8>
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3724      	adds	r7, #36	@ 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b089      	sub	sp, #36	@ 0x24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3314      	adds	r3, #20
 8001102:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	e853 3f00 	ldrex	r3, [r3]
 800110a:	60bb      	str	r3, [r7, #8]
   return(result);
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3314      	adds	r3, #20
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	61ba      	str	r2, [r7, #24]
 800111c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800111e:	6979      	ldr	r1, [r7, #20]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	e841 2300 	strex	r3, r2, [r1]
 8001126:	613b      	str	r3, [r7, #16]
   return(result);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1e7      	bne.n	80010fe <LL_USART_EnableDMAReq_TX+0x8>
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	3724      	adds	r7, #36	@ 0x24
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3304      	adds	r3, #4
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <USARTDrv_Init>:

#define ARRAY_LEN(x)            (sizeof(x) / sizeof((x)[0]))
#define USARTDRV_SEMPAHORE_MAX_DELAY	( 100 )		//< Time in ms, how long semaphor will wait

void USARTDrv_Init(USARTDrv* this)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af02      	add	r7, sp, #8
 800115a:	6078      	str	r0, [r7, #4]
	pUSARTDrv = this;
 800115c:	4a19      	ldr	r2, [pc, #100]	@ (80011c4 <USARTDrv_Init+0x70>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
	USART_config();
 8001162:	f000 f921 	bl	80013a8 <USART_config>
	DMA_config();
 8001166:	f000 f989 	bl	800147c <DMA_config>
	this -> DMAtransmitComplete = 0;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	this -> USARTtransmitComplete = 0;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	this -> receptionComplete = 0;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

	this->txSempahore = xSemaphoreCreateBinary();
 8001182:	2203      	movs	r2, #3
 8001184:	2100      	movs	r1, #0
 8001186:	2001      	movs	r0, #1
 8001188:	f001 f87c 	bl	8002284 <xQueueGenericCreate>
 800118c:	4602      	mov	r2, r0
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	635a      	str	r2, [r3, #52]	@ 0x34
	this->assureSendSemaphore = xSemaphoreCreateBinary();
 8001192:	2203      	movs	r2, #3
 8001194:	2100      	movs	r1, #0
 8001196:	2001      	movs	r0, #1
 8001198:	f001 f874 	bl	8002284 <xQueueGenericCreate>
 800119c:	4602      	mov	r2, r0
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	639a      	str	r2, [r3, #56]	@ 0x38
	xTaskCreate(USARTDrv_RxTask,
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	332c      	adds	r3, #44	@ 0x2c
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	2306      	movs	r3, #6
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011b2:	4905      	ldr	r1, [pc, #20]	@ (80011c8 <USARTDrv_Init+0x74>)
 80011b4:	4805      	ldr	r0, [pc, #20]	@ (80011cc <USARTDrv_Init+0x78>)
 80011b6:	f001 fc2f 	bl	8002a18 <xTaskCreate>
				"RX Task",
				FRTOS_CFG_MAINDEV_SDEPTH,
				(void*) this,
				RX_PRIORITY,
				&this->rxTask);
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000007c 	.word	0x2000007c
 80011c8:	08004ef8 	.word	0x08004ef8
 80011cc:	08001271 	.word	0x08001271

080011d0 <USARTDrv_TX>:
}



uint8_t USARTDrv_TX(uint8_t* userBuffer)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<sizeof(userBuffer); i++){
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	e00c      	b.n	80011f8 <USARTDrv_TX+0x28>
		pUSARTDrv->TxDmaBuff[i] = userBuffer[i];
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001264 <USARTDrv_TX+0x94>)
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	7819      	ldrb	r1, [r3, #0]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4413      	add	r3, r2
 80011ee:	460a      	mov	r2, r1
 80011f0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<sizeof(userBuffer); i++){
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3301      	adds	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d9ef      	bls.n	80011de <USARTDrv_TX+0xe>


	//if(xSemaphoreTake(pUSARTDrv->txSempahore, USARTDRV_SEMPAHORE_MAX_DELAY) != pdTRUE) return 0; //jesli nie mozna acquirowac semafora zwraca 0

	//Jesli udalo sie przyjac semafora odpala transfer DMA
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_7);
 80011fe:	2107      	movs	r1, #7
 8001200:	4819      	ldr	r0, [pc, #100]	@ (8001268 <USARTDrv_TX+0x98>)
 8001202:	f7ff fc25 	bl	8000a50 <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_7, sizeof(userBuffer));
 8001206:	2204      	movs	r2, #4
 8001208:	2107      	movs	r1, #7
 800120a:	4817      	ldr	r0, [pc, #92]	@ (8001268 <USARTDrv_TX+0x98>)
 800120c:	f7ff fd54 	bl	8000cb8 <LL_DMA_SetDataLength>
	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_7);
 8001210:	2107      	movs	r1, #7
 8001212:	4815      	ldr	r0, [pc, #84]	@ (8001268 <USARTDrv_TX+0x98>)
 8001214:	f7ff fbfc 	bl	8000a10 <LL_DMA_EnableStream>


	//Jesli dma i usart skonczyly transfer konczy wysylke, oddaje semafora i zwraca 1
	if(LL_USART_IsActiveFlag_TC(USART1) && LL_DMA_IsActiveFlag_TC1(DMA2)){
 8001218:	4814      	ldr	r0, [pc, #80]	@ (800126c <USARTDrv_TX+0x9c>)
 800121a:	f7ff febf 	bl	8000f9c <LL_USART_IsActiveFlag_TC>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d019      	beq.n	8001258 <USARTDrv_TX+0x88>
 8001224:	4810      	ldr	r0, [pc, #64]	@ (8001268 <USARTDrv_TX+0x98>)
 8001226:	f7ff fe01 	bl	8000e2c <LL_DMA_IsActiveFlag_TC1>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d013      	beq.n	8001258 <USARTDrv_TX+0x88>
		LL_USART_ClearFlag_TC(USART1);
 8001230:	480e      	ldr	r0, [pc, #56]	@ (800126c <USARTDrv_TX+0x9c>)
 8001232:	f7ff fec6 	bl	8000fc2 <LL_USART_ClearFlag_TC>
		LL_DMA_ClearFlag_TC1(DMA2);
 8001236:	480c      	ldr	r0, [pc, #48]	@ (8001268 <USARTDrv_TX+0x98>)
 8001238:	f7ff fe0c 	bl	8000e54 <LL_DMA_ClearFlag_TC1>

		LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_7);
 800123c:	2107      	movs	r1, #7
 800123e:	480a      	ldr	r0, [pc, #40]	@ (8001268 <USARTDrv_TX+0x98>)
 8001240:	f7ff fc06 	bl	8000a50 <LL_DMA_DisableStream>
		xSemaphoreGive(pUSARTDrv->txSempahore);
 8001244:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <USARTDrv_TX+0x94>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800124a:	2300      	movs	r3, #0
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	f001 f88a 	bl	8002368 <xQueueGenericSend>
		return 1;
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <USARTDrv_TX+0x8a>
	}

	return 0;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000007c 	.word	0x2000007c
 8001268:	40026400 	.word	0x40026400
 800126c:	40011000 	.word	0x40011000

08001270 <USARTDrv_RxTask>:


static TaskHandle_t xTaskToNotify = NULL;

static void USARTDrv_RxTask(void *pvParameters){
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	USARTDrv* this = (USARTDrv*) pvParameters;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	60fb      	str	r3, [r7, #12]
	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 800127c:	2102      	movs	r1, #2
 800127e:	4818      	ldr	r0, [pc, #96]	@ (80012e0 <USARTDrv_RxTask+0x70>)
 8001280:	f7ff fbc6 	bl	8000a10 <LL_DMA_EnableStream>
	configASSERT( xTaskToNotify == NULL );
 8001284:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <USARTDrv_RxTask+0x74>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00b      	beq.n	80012a4 <USARTDrv_RxTask+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800128c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001290:	f383 8811 	msr	BASEPRI, r3
 8001294:	f3bf 8f6f 	isb	sy
 8001298:	f3bf 8f4f 	dsb	sy
 800129c:	60bb      	str	r3, [r7, #8]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <USARTDrv_RxTask+0x30>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 80012a4:	f002 fb3a 	bl	800391c <xTaskGetCurrentTaskHandle>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a0e      	ldr	r2, [pc, #56]	@ (80012e4 <USARTDrv_RxTask+0x74>)
 80012ac:	6013      	str	r3, [r2, #0]

	while(!this->killRecieveTask){
 80012ae:	e007      	b.n	80012c0 <USARTDrv_RxTask+0x50>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);	//tutaj warto czekac chyba na flage HT, TC albo idle
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	2101      	movs	r1, #1
 80012b6:	2000      	movs	r0, #0
 80012b8:	f002 fbe8 	bl	8003a8c <ulTaskGenericNotifyTake>
		usart_rx_check();
 80012bc:	f000 f814 	bl	80012e8 <usart_rx_check>
	while(!this->killRecieveTask){
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f2      	beq.n	80012b0 <USARTDrv_RxTask+0x40>
	}
	this->rxTask = NULL;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	vTaskDelete( NULL );
 80012d0:	2000      	movs	r0, #0
 80012d2:	f001 fced 	bl	8002cb0 <vTaskDelete>
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40026400 	.word	0x40026400
 80012e4:	20000080 	.word	0x20000080

080012e8 <usart_rx_check>:


void usart_rx_check(void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
    static size_t old_pos;
    size_t pos;

    /* Calculate current position in buffer and check for new data available */
    pos = ARRAY_LEN(&pUSARTDrv -> RxDmaBuff) - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_1);
 80012ee:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80012f2:	482a      	ldr	r0, [pc, #168]	@ (800139c <usart_rx_check+0xb4>)
 80012f4:	f7ff fd04 	bl	8000d00 <LL_DMA_GetDataLength>
 80012f8:	4603      	mov	r3, r0
 80012fa:	425b      	negs	r3, r3
 80012fc:	607b      	str	r3, [r7, #4]
    if (pos != old_pos) {                       /* Check change in received data */
 80012fe:	4b28      	ldr	r3, [pc, #160]	@ (80013a0 <usart_rx_check+0xb8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	429a      	cmp	r2, r3
 8001306:	d045      	beq.n	8001394 <usart_rx_check+0xac>
        if (pos > old_pos) {                    /* Current position is over previous one */
 8001308:	4b25      	ldr	r3, [pc, #148]	@ (80013a0 <usart_rx_check+0xb8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	429a      	cmp	r2, r3
 8001310:	d91c      	bls.n	800134c <usart_rx_check+0x64>
             * [   5   ]            |------------------------------------|
             * [   6   ] <- pos
             * [   7   ]
             * [ N - 1 ]
             */
        	for(int i = old_pos;i<pos;i++){
 8001312:	4b23      	ldr	r3, [pc, #140]	@ (80013a0 <usart_rx_check+0xb8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	e013      	b.n	8001342 <usart_rx_check+0x5a>
        		pUSARTDrv -> rxBuffer[i - old_pos] =  pUSARTDrv -> RxDmaBuff[i];
 800131a:	4b22      	ldr	r3, [pc, #136]	@ (80013a4 <usart_rx_check+0xbc>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4413      	add	r3, r2
 8001322:	3314      	adds	r3, #20
 8001324:	7818      	ldrb	r0, [r3, #0]
 8001326:	4b1f      	ldr	r3, [pc, #124]	@ (80013a4 <usart_rx_check+0xbc>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68f9      	ldr	r1, [r7, #12]
 800132c:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <usart_rx_check+0xb8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	1acb      	subs	r3, r1, r3
 8001332:	4601      	mov	r1, r0
 8001334:	330e      	adds	r3, #14
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	6059      	str	r1, [r3, #4]
        	for(int i = old_pos;i<pos;i++){
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3301      	adds	r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	429a      	cmp	r2, r3
 8001348:	d8e7      	bhi.n	800131a <usart_rx_check+0x32>
 800134a:	e020      	b.n	800138e <usart_rx_check+0xa6>
             * [   5   ]            |                                 |
             * [   6   ]            | First block (len = N - old_pos) |
             * [   7   ]            |                                 |
             * [ N - 1 ]            |---------------------------------|
             */
        	int i = old_pos;
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <usart_rx_check+0xb8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	603b      	str	r3, [r7, #0]
        	for(i;i<ARRAY_LEN(&pUSARTDrv -> RxDmaBuff);i++){
 8001352:	bf00      	nop
        	        		pUSARTDrv -> rxBuffer[i - old_pos] =  pUSARTDrv -> RxDmaBuff[i];
        	        	}
            if (pos > 0) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d019      	beq.n	800138e <usart_rx_check+0xa6>
            	for(int j = 0;j<pos;j++){
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	e012      	b.n	8001386 <usart_rx_check+0x9e>
            	        	pUSARTDrv -> rxBuffer[i + j] =  pUSARTDrv -> RxDmaBuff[j];
 8001360:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <usart_rx_check+0xbc>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4413      	add	r3, r2
 8001368:	3314      	adds	r3, #20
 800136a:	7818      	ldrb	r0, [r3, #0]
 800136c:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <usart_rx_check+0xbc>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	6839      	ldr	r1, [r7, #0]
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	440b      	add	r3, r1
 8001376:	4601      	mov	r1, r0
 8001378:	330e      	adds	r3, #14
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	6059      	str	r1, [r3, #4]
            	for(int j = 0;j<pos;j++){
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	3301      	adds	r3, #1
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	429a      	cmp	r2, r3
 800138c:	d8e8      	bhi.n	8001360 <usart_rx_check+0x78>
            	        	}
            }
        }
        old_pos = pos;                          /* Save current position as old for next transfers */
 800138e:	4a04      	ldr	r2, [pc, #16]	@ (80013a0 <usart_rx_check+0xb8>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6013      	str	r3, [r2, #0]
    }
}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40026000 	.word	0x40026000
 80013a0:	20000084 	.word	0x20000084
 80013a4:	2000007c 	.word	0x2000007c

080013a8 <USART_config>:




void USART_config(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08e      	sub	sp, #56	@ 0x38
 80013ac:	af00      	add	r7, sp, #0
	LL_USART_InitTypeDef USART_InitStruct = {0};
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80013d2:	2010      	movs	r0, #16
 80013d4:	f7ff fda4 	bl	8000f20 <LL_APB2_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80013d8:	2001      	movs	r0, #1
 80013da:	f7ff fd89 	bl	8000ef0 <LL_AHB1_GRP1_EnableClock>

	  /**USART1 GPIO Configuration
	  PA9   ------> USART1_TX
	  PA10   ------> USART1_RX
	  */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 80013de:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013e2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013e4:	2302      	movs	r3, #2
 80013e6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80013f4:	2307      	movs	r3, #7
 80013f6:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	481d      	ldr	r0, [pc, #116]	@ (8001474 <USART_config+0xcc>)
 80013fe:	f002 fe70 	bl	80040e2 <LL_GPIO_Init>

	USART_InitStruct.BaudRate = 115200;
 8001402:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001406:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001410:	2300      	movs	r3, #0
 8001412:	62bb      	str	r3, [r7, #40]	@ 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001414:	230c      	movs	r3, #12
 8001416:	62fb      	str	r3, [r7, #44]	@ 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001418:	2300      	movs	r3, #0
 800141a:	633b      	str	r3, [r7, #48]	@ 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800141c:	2300      	movs	r3, #0
 800141e:	637b      	str	r3, [r7, #52]	@ 0x34
	LL_USART_Init(USART1, &USART_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	4814      	ldr	r0, [pc, #80]	@ (8001478 <USART_config+0xd0>)
 8001428:	f003 fb32 	bl	8004a90 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART1);
 800142c:	4812      	ldr	r0, [pc, #72]	@ (8001478 <USART_config+0xd0>)
 800142e:	f7ff fd9f 	bl	8000f70 <LL_USART_ConfigAsyncMode>
	LL_USART_EnableIT_TC(USART1);
 8001432:	4811      	ldr	r0, [pc, #68]	@ (8001478 <USART_config+0xd0>)
 8001434:	f7ff fe19 	bl	800106a <LL_USART_EnableIT_TC>
	LL_USART_EnableIT_RXNE(USART1);
 8001438:	480f      	ldr	r0, [pc, #60]	@ (8001478 <USART_config+0xd0>)
 800143a:	f7ff fdf3 	bl	8001024 <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_IDLE(USART1);
 800143e:	480e      	ldr	r0, [pc, #56]	@ (8001478 <USART_config+0xd0>)
 8001440:	f7ff fdcd 	bl	8000fde <LL_USART_EnableIT_IDLE>
	LL_USART_EnableDMAReq_RX(USART1);
 8001444:	480c      	ldr	r0, [pc, #48]	@ (8001478 <USART_config+0xd0>)
 8001446:	f7ff fe33 	bl	80010b0 <LL_USART_EnableDMAReq_RX>
	LL_USART_EnableDMAReq_TX(USART1);
 800144a:	480b      	ldr	r0, [pc, #44]	@ (8001478 <USART_config+0xd0>)
 800144c:	f7ff fe53 	bl	80010f6 <LL_USART_EnableDMAReq_TX>
	LL_USART_Enable(USART1);
 8001450:	4809      	ldr	r0, [pc, #36]	@ (8001478 <USART_config+0xd0>)
 8001452:	f7ff fd7d 	bl	8000f50 <LL_USART_Enable>
	LL_USART_ClearFlag_TC(USART1);
 8001456:	4808      	ldr	r0, [pc, #32]	@ (8001478 <USART_config+0xd0>)
 8001458:	f7ff fdb3 	bl	8000fc2 <LL_USART_ClearFlag_TC>

	/* USART1 interrupt Init */
	NVIC_SetPriority(USART1_IRQn, 7);
 800145c:	2107      	movs	r1, #7
 800145e:	2025      	movs	r0, #37	@ 0x25
 8001460:	f7ff faac 	bl	80009bc <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8001464:	2025      	movs	r0, #37	@ 0x25
 8001466:	f7ff fa8b 	bl	8000980 <__NVIC_EnableIRQ>

	/* Polling USART1 initialisation */
}
 800146a:	bf00      	nop
 800146c:	3738      	adds	r7, #56	@ 0x38
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40020000 	.word	0x40020000
 8001478:	40011000 	.word	0x40011000

0800147c <DMA_config>:

void DMA_config(){
 800147c:	b5b0      	push	{r4, r5, r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af02      	add	r7, sp, #8

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8001482:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001486:	f7ff fd33 	bl	8000ef0 <LL_AHB1_GRP1_EnableClock>


	/* USART1_TX Init */
	LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_7, LL_DMA_CHANNEL_4);
 800148a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800148e:	2107      	movs	r1, #7
 8001490:	4856      	ldr	r0, [pc, #344]	@ (80015ec <DMA_config+0x170>)
 8001492:	f7ff fc4b 	bl	8000d2c <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001496:	2240      	movs	r2, #64	@ 0x40
 8001498:	2107      	movs	r1, #7
 800149a:	4854      	ldr	r0, [pc, #336]	@ (80015ec <DMA_config+0x170>)
 800149c:	f7ff faf8 	bl	8000a90 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_7, LL_DMA_PRIORITY_HIGH);
 80014a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014a4:	2107      	movs	r1, #7
 80014a6:	4851      	ldr	r0, [pc, #324]	@ (80015ec <DMA_config+0x170>)
 80014a8:	f7ff fbe2 	bl	8000c70 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MODE_NORMAL);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2107      	movs	r1, #7
 80014b0:	484e      	ldr	r0, [pc, #312]	@ (80015ec <DMA_config+0x170>)
 80014b2:	f7ff fb29 	bl	8000b08 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_PERIPH_NOINCREMENT);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2107      	movs	r1, #7
 80014ba:	484c      	ldr	r0, [pc, #304]	@ (80015ec <DMA_config+0x170>)
 80014bc:	f7ff fb48 	bl	8000b50 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MEMORY_INCREMENT);
 80014c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014c4:	2107      	movs	r1, #7
 80014c6:	4849      	ldr	r0, [pc, #292]	@ (80015ec <DMA_config+0x170>)
 80014c8:	f7ff fb66 	bl	8000b98 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_7, LL_DMA_PDATAALIGN_BYTE);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2107      	movs	r1, #7
 80014d0:	4846      	ldr	r0, [pc, #280]	@ (80015ec <DMA_config+0x170>)
 80014d2:	f7ff fb85 	bl	8000be0 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_7, LL_DMA_MDATAALIGN_BYTE);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2107      	movs	r1, #7
 80014da:	4844      	ldr	r0, [pc, #272]	@ (80015ec <DMA_config+0x170>)
 80014dc:	f7ff fba4 	bl	8000c28 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_7);
 80014e0:	2107      	movs	r1, #7
 80014e2:	4842      	ldr	r0, [pc, #264]	@ (80015ec <DMA_config+0x170>)
 80014e4:	f7ff fc46 	bl	8000d74 <LL_DMA_DisableFifoMode>


	/* USART1_RX Init */
	LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 80014e8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014ec:	2102      	movs	r1, #2
 80014ee:	483f      	ldr	r0, [pc, #252]	@ (80015ec <DMA_config+0x170>)
 80014f0:	f7ff fc1c 	bl	8000d2c <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2102      	movs	r1, #2
 80014f8:	483c      	ldr	r0, [pc, #240]	@ (80015ec <DMA_config+0x170>)
 80014fa:	f7ff fac9 	bl	8000a90 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_HIGH);
 80014fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001502:	2102      	movs	r1, #2
 8001504:	4839      	ldr	r0, [pc, #228]	@ (80015ec <DMA_config+0x170>)
 8001506:	f7ff fbb3 	bl	8000c70 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 800150a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800150e:	2102      	movs	r1, #2
 8001510:	4836      	ldr	r0, [pc, #216]	@ (80015ec <DMA_config+0x170>)
 8001512:	f7ff faf9 	bl	8000b08 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8001516:	2200      	movs	r2, #0
 8001518:	2102      	movs	r1, #2
 800151a:	4834      	ldr	r0, [pc, #208]	@ (80015ec <DMA_config+0x170>)
 800151c:	f7ff fb18 	bl	8000b50 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 8001520:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001524:	2102      	movs	r1, #2
 8001526:	4831      	ldr	r0, [pc, #196]	@ (80015ec <DMA_config+0x170>)
 8001528:	f7ff fb36 	bl	8000b98 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 800152c:	2200      	movs	r2, #0
 800152e:	2102      	movs	r1, #2
 8001530:	482e      	ldr	r0, [pc, #184]	@ (80015ec <DMA_config+0x170>)
 8001532:	f7ff fb55 	bl	8000be0 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 8001536:	2200      	movs	r2, #0
 8001538:	2102      	movs	r1, #2
 800153a:	482c      	ldr	r0, [pc, #176]	@ (80015ec <DMA_config+0x170>)
 800153c:	f7ff fb74 	bl	8000c28 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
 8001540:	2102      	movs	r1, #2
 8001542:	482a      	ldr	r0, [pc, #168]	@ (80015ec <DMA_config+0x170>)
 8001544:	f7ff fc16 	bl	8000d74 <LL_DMA_DisableFifoMode>


	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_7,
							&pUSARTDrv -> TxDmaBuff,
 8001548:	4b29      	ldr	r3, [pc, #164]	@ (80015f0 <DMA_config+0x174>)
 800154a:	681b      	ldr	r3, [r3, #0]
	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_7,
 800154c:	461d      	mov	r5, r3
 800154e:	4829      	ldr	r0, [pc, #164]	@ (80015f4 <DMA_config+0x178>)
 8001550:	f7ff fdf4 	bl	800113c <LL_USART_DMA_GetRegAddr>
 8001554:	4604      	mov	r4, r0
 8001556:	2107      	movs	r1, #7
 8001558:	4824      	ldr	r0, [pc, #144]	@ (80015ec <DMA_config+0x170>)
 800155a:	f7ff fabd 	bl	8000ad8 <LL_DMA_GetDataTransferDirection>
 800155e:	4603      	mov	r3, r0
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	4623      	mov	r3, r4
 8001564:	462a      	mov	r2, r5
 8001566:	2107      	movs	r1, #7
 8001568:	4820      	ldr	r0, [pc, #128]	@ (80015ec <DMA_config+0x170>)
 800156a:	f7ff fc23 	bl	8000db4 <LL_DMA_ConfigAddresses>
							LL_USART_DMA_GetRegAddr(USART1),
							LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_7));
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_7,  sizeof(&pUSARTDrv -> TxDmaBuff));
 800156e:	2204      	movs	r2, #4
 8001570:	2107      	movs	r1, #7
 8001572:	481e      	ldr	r0, [pc, #120]	@ (80015ec <DMA_config+0x170>)
 8001574:	f7ff fba0 	bl	8000cb8 <LL_DMA_SetDataLength>

	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_2,
 8001578:	481e      	ldr	r0, [pc, #120]	@ (80015f4 <DMA_config+0x178>)
 800157a:	f7ff fddf 	bl	800113c <LL_USART_DMA_GetRegAddr>
 800157e:	4604      	mov	r4, r0
	                       LL_USART_DMA_GetRegAddr(USART1),
						   &pUSARTDrv -> RxDmaBuff,
 8001580:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <DMA_config+0x174>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3314      	adds	r3, #20
	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_2,
 8001586:	461d      	mov	r5, r3
 8001588:	2102      	movs	r1, #2
 800158a:	4818      	ldr	r0, [pc, #96]	@ (80015ec <DMA_config+0x170>)
 800158c:	f7ff faa4 	bl	8000ad8 <LL_DMA_GetDataTransferDirection>
 8001590:	4603      	mov	r3, r0
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	462b      	mov	r3, r5
 8001596:	4622      	mov	r2, r4
 8001598:	2102      	movs	r1, #2
 800159a:	4814      	ldr	r0, [pc, #80]	@ (80015ec <DMA_config+0x170>)
 800159c:	f7ff fc0a 	bl	8000db4 <LL_DMA_ConfigAddresses>
	                       LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_2));
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, sizeof(pUSARTDrv -> RxDmaBuff));
 80015a0:	2214      	movs	r2, #20
 80015a2:	2102      	movs	r1, #2
 80015a4:	4811      	ldr	r0, [pc, #68]	@ (80015ec <DMA_config+0x170>)
 80015a6:	f7ff fb87 	bl	8000cb8 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_7);
 80015aa:	2107      	movs	r1, #7
 80015ac:	480f      	ldr	r0, [pc, #60]	@ (80015ec <DMA_config+0x170>)
 80015ae:	f7ff fc7f 	bl	8000eb0 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_7);
 80015b2:	2107      	movs	r1, #7
 80015b4:	480d      	ldr	r0, [pc, #52]	@ (80015ec <DMA_config+0x170>)
 80015b6:	f7ff fc5b 	bl	8000e70 <LL_DMA_EnableIT_TE>
	LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_2);
 80015ba:	2102      	movs	r1, #2
 80015bc:	480b      	ldr	r0, [pc, #44]	@ (80015ec <DMA_config+0x170>)
 80015be:	f7ff fc77 	bl	8000eb0 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_2);
 80015c2:	2102      	movs	r1, #2
 80015c4:	4809      	ldr	r0, [pc, #36]	@ (80015ec <DMA_config+0x170>)
 80015c6:	f7ff fc53 	bl	8000e70 <LL_DMA_EnableIT_TE>


	NVIC_SetPriority(DMA2_Stream2_IRQn, 7);
 80015ca:	2107      	movs	r1, #7
 80015cc:	203a      	movs	r0, #58	@ 0x3a
 80015ce:	f7ff f9f5 	bl	80009bc <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80015d2:	203a      	movs	r0, #58	@ 0x3a
 80015d4:	f7ff f9d4 	bl	8000980 <__NVIC_EnableIRQ>
	NVIC_SetPriority(DMA2_Stream7_IRQn, 7);
 80015d8:	2107      	movs	r1, #7
 80015da:	2046      	movs	r0, #70	@ 0x46
 80015dc:	f7ff f9ee 	bl	80009bc <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80015e0:	2046      	movs	r0, #70	@ 0x46
 80015e2:	f7ff f9cd 	bl	8000980 <__NVIC_EnableIRQ>

}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bdb0      	pop	{r4, r5, r7, pc}
 80015ec:	40026400 	.word	0x40026400
 80015f0:	2000007c 	.word	0x2000007c
 80015f4:	40011000 	.word	0x40011000

080015f8 <UART_RX_Callback>:

void UART_RX_Callback(){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0

		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
	    /* At this point xTaskToNotify should not be NULL as a transmission was
	    in progress. */
	    //configASSERT( xTaskToNotify != NULL );

	    /* Notify the task that the transmission is complete. */
	    vTaskNotifyGiveIndexedFromISR( &pUSARTDrv->rxTask, 0, &xHigherPriorityTaskWoken );
 8001602:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <UART_RX_Callback+0x40>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	332c      	adds	r3, #44	@ 0x2c
 8001608:	1d3a      	adds	r2, r7, #4
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f002 fabb 	bl	8003b88 <vTaskGenericNotifyGiveFromISR>

	    /* There are no transmissions in progress, so no tasks to notify. */
	    xTaskToNotify = NULL;
 8001612:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <UART_RX_Callback+0x44>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

	    /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
	    should be performed to ensure the interrupt returns directly to the highest
	    priority task.  The macro used for this purpose is dependent on the port in
	    use and may be called portEND_SWITCHING_ISR(). */
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d007      	beq.n	800162e <UART_RX_Callback+0x36>
 800161e:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <UART_RX_Callback+0x48>)
 8001620:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	f3bf 8f4f 	dsb	sy
 800162a:	f3bf 8f6f 	isb	sy
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000007c 	.word	0x2000007c
 800163c:	20000080 	.word	0x20000080
 8001640:	e000ed04 	.word	0xe000ed04

08001644 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 800164c:	f001 fc90 	bl	8002f70 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f003 fae3 	bl	8004c1c <malloc>
 8001656:	4603      	mov	r3, r0
 8001658:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800165a:	f001 fc97 	bl	8002f8c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <pvPortMalloc+0x24>
        {
            vApplicationMallocFailedHook();
 8001664:	f000 fa72 	bl	8001b4c <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
 8001668:	68fb      	ldr	r3, [r7, #12]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
    if( pv != NULL )
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 8001680:	f001 fc76 	bl	8002f70 <vTaskSuspendAll>
        {
            free( pv );
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f003 fad1 	bl	8004c2c <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 800168a:	f001 fc7f 	bl	8002f8c <xTaskResumeAll>
    }
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f103 0208 	add.w	r2, r3, #8
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f04f 32ff 	mov.w	r2, #4294967295
 80016ae:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f103 0208 	add.w	r2, r3, #8
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f103 0208 	add.w	r2, r3, #8
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) += ( UBaseType_t ) 1U;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174e:	d103      	bne.n	8001758 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	e00c      	b.n	8001772 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3308      	adds	r3, #8
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	e002      	b.n	8001766 <vListInsert+0x2e>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	429a      	cmp	r2, r3
 8001770:	d2f6      	bcs.n	8001760 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) += ( UBaseType_t ) 1U;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6892      	ldr	r2, [r2, #8]
 80017c0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6852      	ldr	r2, [r2, #4]
 80017ca:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d103      	bne.n	80017de <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) -= ( UBaseType_t ) 1U;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	1e5a      	subs	r2, r3, #1
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <LL_RCC_HSI_Enable+0x1c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a04      	ldr	r2, [pc, #16]	@ (800181c <LL_RCC_HSI_Enable+0x1c>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6013      	str	r3, [r2, #0]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800

08001820 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <LL_RCC_HSI_IsReady+0x20>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b02      	cmp	r3, #2
 800182e:	bf0c      	ite	eq
 8001830:	2301      	moveq	r3, #1
 8001832:	2300      	movne	r3, #0
 8001834:	b2db      	uxtb	r3, r3
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	40023800 	.word	0x40023800

08001844 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800184c:	4b07      	ldr	r3, [pc, #28]	@ (800186c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	4904      	ldr	r1, [pc, #16]	@ (800186c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800185a:	4313      	orrs	r3, r2
 800185c:	600b      	str	r3, [r1, #0]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800

08001870 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <LL_RCC_SetSysClkSource+0x24>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f023 0203 	bic.w	r2, r3, #3
 8001880:	4904      	ldr	r1, [pc, #16]	@ (8001894 <LL_RCC_SetSysClkSource+0x24>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40023800 	.word	0x40023800

08001898 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800189c:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <LL_RCC_GetSysClkSource+0x18>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <LL_RCC_SetAHBPrescaler+0x24>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c4:	4904      	ldr	r1, [pc, #16]	@ (80018d8 <LL_RCC_SetAHBPrescaler+0x24>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40023800 	.word	0x40023800

080018dc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <LL_RCC_SetAPB1Prescaler+0x24>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018ec:	4904      	ldr	r1, [pc, #16]	@ (8001900 <LL_RCC_SetAPB1Prescaler+0x24>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	608b      	str	r3, [r1, #8]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40023800 	.word	0x40023800

08001904 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <LL_RCC_SetAPB2Prescaler+0x24>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001914:	4904      	ldr	r1, [pc, #16]	@ (8001928 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4313      	orrs	r3, r2
 800191a:	608b      	str	r3, [r1, #8]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	40023800 	.word	0x40023800

0800192c <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8001934:	4b07      	ldr	r3, [pc, #28]	@ (8001954 <LL_RCC_SetTIMPrescaler+0x28>)
 8001936:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800193a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800193e:	4905      	ldr	r1, [pc, #20]	@ (8001954 <LL_RCC_SetTIMPrescaler+0x28>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4313      	orrs	r3, r2
 8001944:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	40023800 	.word	0x40023800

08001958 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <LL_RCC_PLL_Enable+0x1c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a04      	ldr	r2, [pc, #16]	@ (8001974 <LL_RCC_PLL_Enable+0x1c>)
 8001962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800

08001978 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800197c:	4b07      	ldr	r3, [pc, #28]	@ (800199c <LL_RCC_PLL_IsReady+0x24>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001984:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001988:	bf0c      	ite	eq
 800198a:	2301      	moveq	r3, #1
 800198c:	2300      	movne	r3, #0
 800198e:	b2db      	uxtb	r3, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800

080019a0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80019ae:	4b0d      	ldr	r3, [pc, #52]	@ (80019e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	68f9      	ldr	r1, [r7, #12]
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	4311      	orrs	r1, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	0192      	lsls	r2, r2, #6
 80019c0:	430a      	orrs	r2, r1
 80019c2:	4908      	ldr	r1, [pc, #32]	@ (80019e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80019d0:	4904      	ldr	r1, [pc, #16]	@ (80019e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	40023800 	.word	0x40023800
 80019e8:	ffbf8000 	.word	0xffbf8000

080019ec <LL_APB1_GRP1_EnableClock>:
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80019f4:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019f8:	4907      	ldr	r1, [pc, #28]	@ (8001a18 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4013      	ands	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	40023800 	.word	0x40023800

08001a1c <LL_APB2_GRP1_EnableClock>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a24:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a28:	4907      	ldr	r1, [pc, #28]	@ (8001a48 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4013      	ands	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40023800 	.word	0x40023800

08001a4c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001a54:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <LL_FLASH_SetLatency+0x24>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 0207 	bic.w	r2, r3, #7
 8001a5c:	4904      	ldr	r1, [pc, #16]	@ (8001a70 <LL_FLASH_SetLatency+0x24>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40023c00 	.word	0x40023c00

08001a74 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001a78:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <LL_FLASH_GetLatency+0x18>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023c00 	.word	0x40023c00

08001a90 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001aa0:	4904      	ldr	r1, [pc, #16]	@ (8001ab4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40007000 	.word	0x40007000

08001ab8 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001abc:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <LL_PWR_IsActiveFlag_VOS+0x24>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ac4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ac8:	bf0c      	ite	eq
 8001aca:	2301      	moveq	r3, #1
 8001acc:	2300      	movne	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40007000 	.word	0x40007000

08001ae0 <main>:

MainDev MainDevOb;


int main(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001ae4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001ae8:	f7ff ff98 	bl	8001a1c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001aec:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001af0:	f7ff ff7c 	bl	80019ec <LL_APB1_GRP1_EnableClock>
  //NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);

  SystemClock_Config();
 8001af4:	f000 f83e 	bl	8001b74 <SystemClock_Config>
  MainDev_Init(&MainDevOb);
 8001af8:	4804      	ldr	r0, [pc, #16]	@ (8001b0c <main+0x2c>)
 8001afa:	f7fe fe45 	bl	8000788 <MainDev_Init>

  vTaskStartScheduler();
 8001afe:	f001 f9f9 	bl	8002ef4 <vTaskStartScheduler>

  while (1)
  {
	  MainDev_MainLoopProc(&MainDevOb);
 8001b02:	4802      	ldr	r0, [pc, #8]	@ (8001b0c <main+0x2c>)
 8001b04:	f7fe fe6a 	bl	80007dc <MainDev_MainLoopProc>
 8001b08:	e7fb      	b.n	8001b02 <main+0x22>
 8001b0a:	bf00      	nop
 8001b0c:	20000088 	.word	0x20000088

08001b10 <vApplicationIdleHook>:
  }
}

void vApplicationIdleHook( void )
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
#ifndef DEBUG
	__WFI(); //set core in sleep
#endif
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <vApplicationTickHook>:

void vApplicationTickHook( void )
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
	MainDevOb.TickCnt++;
 8001b24:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <vApplicationTickHook+0x28>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	4a07      	ldr	r2, [pc, #28]	@ (8001b48 <vApplicationTickHook+0x28>)
 8001b2c:	6013      	str	r3, [r2, #0]
	if(MainDevOb.TickCnt > 0x7FFFFFF)
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <vApplicationTickHook+0x28>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001b36:	d302      	bcc.n	8001b3e <vApplicationTickHook+0x1e>
		MainDevOb.TickCnt = 0;
 8001b38:	4b03      	ldr	r3, [pc, #12]	@ (8001b48 <vApplicationTickHook+0x28>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	20000088 	.word	0x20000088

08001b4c <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
#ifdef DEBUG
	__ASM volatile("BKPT #01");
 8001b50:	be01      	bkpt	0x0001
#else
#endif
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
#ifdef DEBUG
	__ASM volatile("BKPT #01");
 8001b66:	be01      	bkpt	0x0001
#else
#endif
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f7ff ff67 	bl	8001a4c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ff78 	bl	8001a74 <LL_FLASH_GetLatency>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d1fa      	bne.n	8001b80 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001b8a:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8001b8e:	f7ff ff7f 	bl	8001a90 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001b92:	2010      	movs	r0, #16
 8001b94:	f7ff fe56 	bl	8001844 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001b98:	f7ff fe32 	bl	8001800 <LL_RCC_HSI_Enable>

  while(LL_RCC_HSI_IsReady() != 1)
 8001b9c:	bf00      	nop
 8001b9e:	f7ff fe3f 	bl	8001820 <LL_RCC_HSI_IsReady>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d1fa      	bne.n	8001b9e <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 100, LL_RCC_PLLP_DIV_2);
 8001ba8:	2300      	movs	r3, #0
 8001baa:	2264      	movs	r2, #100	@ 0x64
 8001bac:	2108      	movs	r1, #8
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f7ff fef6 	bl	80019a0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001bb4:	f7ff fed0 	bl	8001958 <LL_RCC_PLL_Enable>

  while(LL_RCC_PLL_IsReady() != 1)
 8001bb8:	bf00      	nop
 8001bba:	f7ff fedd 	bl	8001978 <LL_RCC_PLL_IsReady>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d1fa      	bne.n	8001bba <SystemClock_Config+0x46>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001bc4:	bf00      	nop
 8001bc6:	f7ff ff77 	bl	8001ab8 <LL_PWR_IsActiveFlag_VOS>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0fa      	beq.n	8001bc6 <SystemClock_Config+0x52>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7ff fe6f 	bl	80018b4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001bd6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001bda:	f7ff fe7f 	bl	80018dc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001bde:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001be2:	f7ff fe8f 	bl	8001904 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001be6:	2002      	movs	r0, #2
 8001be8:	f7ff fe42 	bl	8001870 <LL_RCC_SetSysClkSource>

  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001bec:	bf00      	nop
 8001bee:	f7ff fe53 	bl	8001898 <LL_RCC_GetSysClkSource>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d1fa      	bne.n	8001bee <SystemClock_Config+0x7a>
  {

  }
  LL_Init1msTick(100000000);
 8001bf8:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <SystemClock_Config+0x9c>)
 8001bfa:	f002 ffc7 	bl	8004b8c <LL_Init1msTick>
  LL_SetSystemCoreClock(100000000);
 8001bfe:	4804      	ldr	r0, [pc, #16]	@ (8001c10 <SystemClock_Config+0x9c>)
 8001c00:	f002 ffd2 	bl	8004ba8 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001c04:	2000      	movs	r0, #0
 8001c06:	f7ff fe91 	bl	800192c <LL_RCC_SetTIMPrescaler>
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	05f5e100 	.word	0x05f5e100

08001c14 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3b04      	subs	r3, #4
 8001c24:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c2c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3b04      	subs	r3, #4
 8001c32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f023 0201 	bic.w	r2, r3, #1
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	3b04      	subs	r3, #4
 8001c42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001c44:	4a0c      	ldr	r2, [pc, #48]	@ (8001c78 <pxPortInitialiseStack+0x64>)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3b14      	subs	r3, #20
 8001c4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3b04      	subs	r3, #4
 8001c5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f06f 0202 	mvn.w	r2, #2
 8001c62:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3b20      	subs	r3, #32
 8001c68:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	08001c7d 	.word	0x08001c7d

08001c7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001c86:	4b13      	ldr	r3, [pc, #76]	@ (8001cd4 <prvTaskExitError+0x58>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8e:	d00b      	beq.n	8001ca8 <prvTaskExitError+0x2c>
    __asm volatile
 8001c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c94:	f383 8811 	msr	BASEPRI, r3
 8001c98:	f3bf 8f6f 	isb	sy
 8001c9c:	f3bf 8f4f 	dsb	sy
 8001ca0:	60fb      	str	r3, [r7, #12]
}
 8001ca2:	bf00      	nop
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <prvTaskExitError+0x28>
    __asm volatile
 8001ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cac:	f383 8811 	msr	BASEPRI, r3
 8001cb0:	f3bf 8f6f 	isb	sy
 8001cb4:	f3bf 8f4f 	dsb	sy
 8001cb8:	60bb      	str	r3, [r7, #8]
}
 8001cba:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001cbc:	bf00      	nop
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0fc      	beq.n	8001cbe <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000000 	.word	0x20000000
	...

08001ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001ce0:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <pxCurrentTCBConst2>)
 8001ce2:	6819      	ldr	r1, [r3, #0]
 8001ce4:	6808      	ldr	r0, [r1, #0]
 8001ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cea:	f380 8809 	msr	PSP, r0
 8001cee:	f3bf 8f6f 	isb	sy
 8001cf2:	f04f 0000 	mov.w	r0, #0
 8001cf6:	f380 8811 	msr	BASEPRI, r0
 8001cfa:	4770      	bx	lr
 8001cfc:	f3af 8000 	nop.w

08001d00 <pxCurrentTCBConst2>:
 8001d00:	20000130 	.word	0x20000130
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop

08001d08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001d08:	4808      	ldr	r0, [pc, #32]	@ (8001d2c <prvPortStartFirstTask+0x24>)
 8001d0a:	6800      	ldr	r0, [r0, #0]
 8001d0c:	6800      	ldr	r0, [r0, #0]
 8001d0e:	f380 8808 	msr	MSP, r0
 8001d12:	f04f 0000 	mov.w	r0, #0
 8001d16:	f380 8814 	msr	CONTROL, r0
 8001d1a:	b662      	cpsie	i
 8001d1c:	b661      	cpsie	f
 8001d1e:	f3bf 8f4f 	dsb	sy
 8001d22:	f3bf 8f6f 	isb	sy
 8001d26:	df00      	svc	0
 8001d28:	bf00      	nop
 8001d2a:	0000      	.short	0x0000
 8001d2c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop

08001d34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08c      	sub	sp, #48	@ 0x30
 8001d38:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001d3a:	4b69      	ldr	r3, [pc, #420]	@ (8001ee0 <xPortStartScheduler+0x1ac>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a69      	ldr	r2, [pc, #420]	@ (8001ee4 <xPortStartScheduler+0x1b0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d10b      	bne.n	8001d5c <xPortStartScheduler+0x28>
    __asm volatile
 8001d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d48:	f383 8811 	msr	BASEPRI, r3
 8001d4c:	f3bf 8f6f 	isb	sy
 8001d50:	f3bf 8f4f 	dsb	sy
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001d5c:	4b60      	ldr	r3, [pc, #384]	@ (8001ee0 <xPortStartScheduler+0x1ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a61      	ldr	r2, [pc, #388]	@ (8001ee8 <xPortStartScheduler+0x1b4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d10b      	bne.n	8001d7e <xPortStartScheduler+0x4a>
    __asm volatile
 8001d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d6a:	f383 8811 	msr	BASEPRI, r3
 8001d6e:	f3bf 8f6f 	isb	sy
 8001d72:	f3bf 8f4f 	dsb	sy
 8001d76:	623b      	str	r3, [r7, #32]
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	e7fd      	b.n	8001d7a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8001d7e:	4b5b      	ldr	r3, [pc, #364]	@ (8001eec <xPortStartScheduler+0x1b8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8001d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d86:	332c      	adds	r3, #44	@ 0x2c
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a59      	ldr	r2, [pc, #356]	@ (8001ef0 <xPortStartScheduler+0x1bc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d00b      	beq.n	8001da8 <xPortStartScheduler+0x74>
    __asm volatile
 8001d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d94:	f383 8811 	msr	BASEPRI, r3
 8001d98:	f3bf 8f6f 	isb	sy
 8001d9c:	f3bf 8f4f 	dsb	sy
 8001da0:	61fb      	str	r3, [r7, #28]
}
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8001da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001daa:	3338      	adds	r3, #56	@ 0x38
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a51      	ldr	r2, [pc, #324]	@ (8001ef4 <xPortStartScheduler+0x1c0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00b      	beq.n	8001dcc <xPortStartScheduler+0x98>
    __asm volatile
 8001db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001db8:	f383 8811 	msr	BASEPRI, r3
 8001dbc:	f3bf 8f6f 	isb	sy
 8001dc0:	f3bf 8f4f 	dsb	sy
 8001dc4:	61bb      	str	r3, [r7, #24]
}
 8001dc6:	bf00      	nop
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001dd0:	4b49      	ldr	r3, [pc, #292]	@ (8001ef8 <xPortStartScheduler+0x1c4>)
 8001dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8001dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dde:	22ff      	movs	r2, #255	@ 0xff
 8001de0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4b41      	ldr	r3, [pc, #260]	@ (8001efc <xPortStartScheduler+0x1c8>)
 8001df6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8001df8:	4b40      	ldr	r3, [pc, #256]	@ (8001efc <xPortStartScheduler+0x1c8>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10b      	bne.n	8001e18 <xPortStartScheduler+0xe4>
    __asm volatile
 8001e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e04:	f383 8811 	msr	BASEPRI, r3
 8001e08:	f3bf 8f6f 	isb	sy
 8001e0c:	f3bf 8f4f 	dsb	sy
 8001e10:	617b      	str	r3, [r7, #20]
}
 8001e12:	bf00      	nop
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d013      	beq.n	8001e4e <xPortStartScheduler+0x11a>
    __asm volatile
 8001e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e2a:	f383 8811 	msr	BASEPRI, r3
 8001e2e:	f3bf 8f6f 	isb	sy
 8001e32:	f3bf 8f4f 	dsb	sy
 8001e36:	613b      	str	r3, [r7, #16]
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	e7fd      	b.n	8001e3a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	3301      	adds	r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e56:	2b80      	cmp	r3, #128	@ 0x80
 8001e58:	d0f1      	beq.n	8001e3e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d103      	bne.n	8001e68 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8001e60:	4b27      	ldr	r3, [pc, #156]	@ (8001f00 <xPortStartScheduler+0x1cc>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	e004      	b.n	8001e72 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f1c3 0307 	rsb	r3, r3, #7
 8001e6e:	4a24      	ldr	r2, [pc, #144]	@ (8001f00 <xPortStartScheduler+0x1cc>)
 8001e70:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001e72:	4b23      	ldr	r3, [pc, #140]	@ (8001f00 <xPortStartScheduler+0x1cc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	4a21      	ldr	r2, [pc, #132]	@ (8001f00 <xPortStartScheduler+0x1cc>)
 8001e7a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001e7c:	4b20      	ldr	r3, [pc, #128]	@ (8001f00 <xPortStartScheduler+0x1cc>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001e84:	4a1e      	ldr	r2, [pc, #120]	@ (8001f00 <xPortStartScheduler+0x1cc>)
 8001e86:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e8e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001e90:	4b1c      	ldr	r3, [pc, #112]	@ (8001f04 <xPortStartScheduler+0x1d0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1b      	ldr	r2, [pc, #108]	@ (8001f04 <xPortStartScheduler+0x1d0>)
 8001e96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e9a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001e9c:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <xPortStartScheduler+0x1d0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a18      	ldr	r2, [pc, #96]	@ (8001f04 <xPortStartScheduler+0x1d0>)
 8001ea2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ea6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8001ea8:	4b17      	ldr	r3, [pc, #92]	@ (8001f08 <xPortStartScheduler+0x1d4>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001eae:	f000 f8e5 	bl	800207c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001eb2:	4b16      	ldr	r3, [pc, #88]	@ (8001f0c <xPortStartScheduler+0x1d8>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001eb8:	f000 f904 	bl	80020c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001ebc:	4b14      	ldr	r3, [pc, #80]	@ (8001f10 <xPortStartScheduler+0x1dc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a13      	ldr	r2, [pc, #76]	@ (8001f10 <xPortStartScheduler+0x1dc>)
 8001ec2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001ec6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001ec8:	f7ff ff1e 	bl	8001d08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001ecc:	f001 fa88 	bl	80033e0 <vTaskSwitchContext>
    prvTaskExitError();
 8001ed0:	f7ff fed4 	bl	8001c7c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3730      	adds	r7, #48	@ 0x30
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00
 8001ee4:	410fc271 	.word	0x410fc271
 8001ee8:	410fc270 	.word	0x410fc270
 8001eec:	e000ed08 	.word	0xe000ed08
 8001ef0:	08001ce1 	.word	0x08001ce1
 8001ef4:	08001fd1 	.word	0x08001fd1
 8001ef8:	e000e400 	.word	0xe000e400
 8001efc:	20000124 	.word	0x20000124
 8001f00:	20000128 	.word	0x20000128
 8001f04:	e000ed20 	.word	0xe000ed20
 8001f08:	e000ed1c 	.word	0xe000ed1c
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	e000ef34 	.word	0xe000ef34

08001f14 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
    __asm volatile
 8001f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f1e:	f383 8811 	msr	BASEPRI, r3
 8001f22:	f3bf 8f6f 	isb	sy
 8001f26:	f3bf 8f4f 	dsb	sy
 8001f2a:	607b      	str	r3, [r7, #4]
}
 8001f2c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001f2e:	4b10      	ldr	r3, [pc, #64]	@ (8001f70 <vPortEnterCritical+0x5c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3301      	adds	r3, #1
 8001f34:	4a0e      	ldr	r2, [pc, #56]	@ (8001f70 <vPortEnterCritical+0x5c>)
 8001f36:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001f38:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <vPortEnterCritical+0x5c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d110      	bne.n	8001f62 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <vPortEnterCritical+0x60>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <vPortEnterCritical+0x4e>
    __asm volatile
 8001f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f4e:	f383 8811 	msr	BASEPRI, r3
 8001f52:	f3bf 8f6f 	isb	sy
 8001f56:	f3bf 8f4f 	dsb	sy
 8001f5a:	603b      	str	r3, [r7, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	e7fd      	b.n	8001f5e <vPortEnterCritical+0x4a>
    }
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000000 	.word	0x20000000
 8001f74:	e000ed04 	.word	0xe000ed04

08001f78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001f7e:	4b12      	ldr	r3, [pc, #72]	@ (8001fc8 <vPortExitCritical+0x50>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10b      	bne.n	8001f9e <vPortExitCritical+0x26>
    __asm volatile
 8001f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f8a:	f383 8811 	msr	BASEPRI, r3
 8001f8e:	f3bf 8f6f 	isb	sy
 8001f92:	f3bf 8f4f 	dsb	sy
 8001f96:	607b      	str	r3, [r7, #4]
}
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	e7fd      	b.n	8001f9a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc8 <vPortExitCritical+0x50>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	4a08      	ldr	r2, [pc, #32]	@ (8001fc8 <vPortExitCritical+0x50>)
 8001fa6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001fa8:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <vPortExitCritical+0x50>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <vPortExitCritical+0x44>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8001fba:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	00000000 	.word	0x00000000

08001fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001fd0:	f3ef 8009 	mrs	r0, PSP
 8001fd4:	f3bf 8f6f 	isb	sy
 8001fd8:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <pxCurrentTCBConst>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	f01e 0f10 	tst.w	lr, #16
 8001fe0:	bf08      	it	eq
 8001fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fea:	6010      	str	r0, [r2, #0]
 8001fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001ff0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001ff4:	f380 8811 	msr	BASEPRI, r0
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	f3bf 8f6f 	isb	sy
 8002000:	f001 f9ee 	bl	80033e0 <vTaskSwitchContext>
 8002004:	f04f 0000 	mov.w	r0, #0
 8002008:	f380 8811 	msr	BASEPRI, r0
 800200c:	bc09      	pop	{r0, r3}
 800200e:	6819      	ldr	r1, [r3, #0]
 8002010:	6808      	ldr	r0, [r1, #0]
 8002012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002016:	f01e 0f10 	tst.w	lr, #16
 800201a:	bf08      	it	eq
 800201c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002020:	f380 8809 	msr	PSP, r0
 8002024:	f3bf 8f6f 	isb	sy
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	f3af 8000 	nop.w

08002030 <pxCurrentTCBConst>:
 8002030:	20000130 	.word	0x20000130
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop

08002038 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
    __asm volatile
 800203e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002042:	f383 8811 	msr	BASEPRI, r3
 8002046:	f3bf 8f6f 	isb	sy
 800204a:	f3bf 8f4f 	dsb	sy
 800204e:	607b      	str	r3, [r7, #4]
}
 8002050:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002052:	f001 f8a3 	bl	800319c <xTaskIncrementTick>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <SysTick_Handler+0x40>)
 800205e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	2300      	movs	r3, #0
 8002066:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	f383 8811 	msr	BASEPRI, r3
}
 800206e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	e000ed04 	.word	0xe000ed04

0800207c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002080:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <vPortSetupTimerInterrupt+0x34>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002086:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <vPortSetupTimerInterrupt+0x38>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800208c:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <vPortSetupTimerInterrupt+0x3c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0a      	ldr	r2, [pc, #40]	@ (80020bc <vPortSetupTimerInterrupt+0x40>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	4a09      	ldr	r2, [pc, #36]	@ (80020c0 <vPortSetupTimerInterrupt+0x44>)
 800209a:	3b01      	subs	r3, #1
 800209c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800209e:	4b04      	ldr	r3, [pc, #16]	@ (80020b0 <vPortSetupTimerInterrupt+0x34>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010
 80020b4:	e000e018 	.word	0xe000e018
 80020b8:	20000004 	.word	0x20000004
 80020bc:	51eb851f 	.word	0x51eb851f
 80020c0:	e000e014 	.word	0xe000e014

080020c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80020c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80020d4 <vPortEnableVFP+0x10>
 80020c8:	6801      	ldr	r1, [r0, #0]
 80020ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80020ce:	6001      	str	r1, [r0, #0]
 80020d0:	4770      	bx	lr
 80020d2:	0000      	.short	0x0000
 80020d4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop

080020dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80020e2:	f3ef 8305 	mrs	r3, IPSR
 80020e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b0f      	cmp	r3, #15
 80020ec:	d915      	bls.n	800211a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80020ee:	4a18      	ldr	r2, [pc, #96]	@ (8002150 <vPortValidateInterruptPriority+0x74>)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80020f8:	4b16      	ldr	r3, [pc, #88]	@ (8002154 <vPortValidateInterruptPriority+0x78>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	7afa      	ldrb	r2, [r7, #11]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d20b      	bcs.n	800211a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8002102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002106:	f383 8811 	msr	BASEPRI, r3
 800210a:	f3bf 8f6f 	isb	sy
 800210e:	f3bf 8f4f 	dsb	sy
 8002112:	607b      	str	r3, [r7, #4]
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	e7fd      	b.n	8002116 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800211a:	4b0f      	ldr	r3, [pc, #60]	@ (8002158 <vPortValidateInterruptPriority+0x7c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002122:	4b0e      	ldr	r3, [pc, #56]	@ (800215c <vPortValidateInterruptPriority+0x80>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d90b      	bls.n	8002142 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800212a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800212e:	f383 8811 	msr	BASEPRI, r3
 8002132:	f3bf 8f6f 	isb	sy
 8002136:	f3bf 8f4f 	dsb	sy
 800213a:	603b      	str	r3, [r7, #0]
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	e7fd      	b.n	800213e <vPortValidateInterruptPriority+0x62>
    }
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000e3f0 	.word	0xe000e3f0
 8002154:	20000124 	.word	0x20000124
 8002158:	e000ed0c 	.word	0xe000ed0c
 800215c:	20000128 	.word	0x20000128

08002160 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800216a:	2301      	movs	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10b      	bne.n	8002190 <xQueueGenericReset+0x30>
    __asm volatile
 8002178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800217c:	f383 8811 	msr	BASEPRI, r3
 8002180:	f3bf 8f6f 	isb	sy
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	60fb      	str	r3, [r7, #12]
}
 800218a:	bf00      	nop
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d05d      	beq.n	8002252 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800219a:	2b00      	cmp	r3, #0
 800219c:	d059      	beq.n	8002252 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a6:	2100      	movs	r1, #0
 80021a8:	fba3 2302 	umull	r2, r3, r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d000      	beq.n	80021b2 <xQueueGenericReset+0x52>
 80021b0:	2101      	movs	r1, #1
 80021b2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d14c      	bne.n	8002252 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80021b8:	f7ff feac 	bl	8001f14 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c4:	6939      	ldr	r1, [r7, #16]
 80021c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	441a      	add	r2, r3
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2200      	movs	r2, #0
 80021d6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e8:	3b01      	subs	r3, #1
 80021ea:	6939      	ldr	r1, [r7, #16]
 80021ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	441a      	add	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	22ff      	movs	r2, #255	@ 0xff
 80021fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	22ff      	movs	r2, #255	@ 0xff
 8002204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d114      	bne.n	8002238 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d01a      	beq.n	800224c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	3310      	adds	r3, #16
 800221a:	4618      	mov	r0, r3
 800221c:	f001 f974 	bl	8003508 <xTaskRemoveFromEventList>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d012      	beq.n	800224c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002226:	4b16      	ldr	r3, [pc, #88]	@ (8002280 <xQueueGenericReset+0x120>)
 8002228:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	f3bf 8f4f 	dsb	sy
 8002232:	f3bf 8f6f 	isb	sy
 8002236:	e009      	b.n	800224c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	3310      	adds	r3, #16
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fa2a 	bl	8001696 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	3324      	adds	r3, #36	@ 0x24
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fa25 	bl	8001696 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800224c:	f7ff fe94 	bl	8001f78 <vPortExitCritical>
 8002250:	e001      	b.n	8002256 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10b      	bne.n	8002274 <xQueueGenericReset+0x114>
    __asm volatile
 800225c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002260:	f383 8811 	msr	BASEPRI, r3
 8002264:	f3bf 8f6f 	isb	sy
 8002268:	f3bf 8f4f 	dsb	sy
 800226c:	60bb      	str	r3, [r7, #8]
}
 800226e:	bf00      	nop
 8002270:	bf00      	nop
 8002272:	e7fd      	b.n	8002270 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8002274:	697b      	ldr	r3, [r7, #20]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	e000ed04 	.word	0xe000ed04

08002284 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	@ 0x28
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	4613      	mov	r3, r2
 8002290:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d02e      	beq.n	80022fa <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800229c:	2100      	movs	r1, #0
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	fba3 2302 	umull	r2, r3, r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d000      	beq.n	80022ac <xQueueGenericCreate+0x28>
 80022aa:	2101      	movs	r1, #1
 80022ac:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d123      	bne.n	80022fa <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022ba:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80022be:	d81c      	bhi.n	80022fa <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	fb02 f303 	mul.w	r3, r2, r3
 80022c8:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	3350      	adds	r3, #80	@ 0x50
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f9b8 	bl	8001644 <pvPortMalloc>
 80022d4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01d      	beq.n	8002318 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	3350      	adds	r3, #80	@ 0x50
 80022e4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022e6:	79fa      	ldrb	r2, [r7, #7]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f815 	bl	8002322 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80022f8:	e00e      	b.n	8002318 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10b      	bne.n	8002318 <xQueueGenericCreate+0x94>
    __asm volatile
 8002300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002304:	f383 8811 	msr	BASEPRI, r3
 8002308:	f3bf 8f6f 	isb	sy
 800230c:	f3bf 8f4f 	dsb	sy
 8002310:	613b      	str	r3, [r7, #16]
}
 8002312:	bf00      	nop
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8002318:	69fb      	ldr	r3, [r7, #28]
    }
 800231a:	4618      	mov	r0, r3
 800231c:	3720      	adds	r7, #32
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d103      	bne.n	800233e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e002      	b.n	8002344 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002350:	2101      	movs	r1, #1
 8002352:	69b8      	ldr	r0, [r7, #24]
 8002354:	f7ff ff04 	bl	8002160 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	78fa      	ldrb	r2, [r7, #3]
 800235c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08c      	sub	sp, #48	@ 0x30
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002376:	2300      	movs	r3, #0
 8002378:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800237e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10b      	bne.n	800239c <xQueueGenericSend+0x34>
    __asm volatile
 8002384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	623b      	str	r3, [r7, #32]
}
 8002396:	bf00      	nop
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d103      	bne.n	80023aa <xQueueGenericSend+0x42>
 80023a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <xQueueGenericSend+0x46>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <xQueueGenericSend+0x48>
 80023ae:	2300      	movs	r3, #0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10b      	bne.n	80023cc <xQueueGenericSend+0x64>
    __asm volatile
 80023b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023b8:	f383 8811 	msr	BASEPRI, r3
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	61fb      	str	r3, [r7, #28]
}
 80023c6:	bf00      	nop
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d103      	bne.n	80023da <xQueueGenericSend+0x72>
 80023d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <xQueueGenericSend+0x76>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <xQueueGenericSend+0x78>
 80023de:	2300      	movs	r3, #0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10b      	bne.n	80023fc <xQueueGenericSend+0x94>
    __asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	61bb      	str	r3, [r7, #24]
}
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <xQueueGenericSend+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80023fc:	f7ff fd8a 	bl	8001f14 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002402:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002408:	429a      	cmp	r2, r3
 800240a:	d302      	bcc.n	8002412 <xQueueGenericSend+0xaa>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d129      	bne.n	8002466 <xQueueGenericSend+0xfe>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002418:	f000 f890 	bl	800253c <prvCopyDataToQueue>
 800241c:	6278      	str	r0, [r7, #36]	@ 0x24

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800241e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002422:	2b00      	cmp	r3, #0
 8002424:	d010      	beq.n	8002448 <xQueueGenericSend+0xe0>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002428:	3324      	adds	r3, #36	@ 0x24
 800242a:	4618      	mov	r0, r3
 800242c:	f001 f86c 	bl	8003508 <xTaskRemoveFromEventList>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d013      	beq.n	800245e <xQueueGenericSend+0xf6>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002436:	4b40      	ldr	r3, [pc, #256]	@ (8002538 <xQueueGenericSend+0x1d0>)
 8002438:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	f3bf 8f4f 	dsb	sy
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	e00a      	b.n	800245e <xQueueGenericSend+0xf6>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <xQueueGenericSend+0xf6>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800244e:	4b3a      	ldr	r3, [pc, #232]	@ (8002538 <xQueueGenericSend+0x1d0>)
 8002450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	f3bf 8f4f 	dsb	sy
 800245a:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800245e:	f7ff fd8b 	bl	8001f78 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8002462:	2301      	movs	r3, #1
 8002464:	e063      	b.n	800252e <xQueueGenericSend+0x1c6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d103      	bne.n	8002474 <xQueueGenericSend+0x10c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800246c:	f7ff fd84 	bl	8001f78 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8002470:	2300      	movs	r3, #0
 8002472:	e05c      	b.n	800252e <xQueueGenericSend+0x1c6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <xQueueGenericSend+0x120>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800247a:	f107 0310 	add.w	r3, r7, #16
 800247e:	4618      	mov	r0, r3
 8002480:	f001 f91c 	bl	80036bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002484:	2301      	movs	r3, #1
 8002486:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002488:	f7ff fd76 	bl	8001f78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800248c:	f000 fd70 	bl	8002f70 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002490:	f7ff fd40 	bl	8001f14 <vPortEnterCritical>
 8002494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002496:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800249a:	b25b      	sxtb	r3, r3
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d103      	bne.n	80024aa <xQueueGenericSend+0x142>
 80024a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024b0:	b25b      	sxtb	r3, r3
 80024b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b6:	d103      	bne.n	80024c0 <xQueueGenericSend+0x158>
 80024b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024c0:	f7ff fd5a 	bl	8001f78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024c4:	1d3a      	adds	r2, r7, #4
 80024c6:	f107 0310 	add.w	r3, r7, #16
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f001 f90b 	bl	80036e8 <xTaskCheckForTimeOut>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d124      	bne.n	8002522 <xQueueGenericSend+0x1ba>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80024d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024da:	f000 f8eb 	bl	80026b4 <prvIsQueueFull>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d018      	beq.n	8002516 <xQueueGenericSend+0x1ae>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80024e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e6:	3310      	adds	r3, #16
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 ffe5 	bl	80034bc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80024f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024f4:	f000 f88c 	bl	8002610 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80024f8:	f000 fd48 	bl	8002f8c <xTaskResumeAll>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f47f af7c 	bne.w	80023fc <xQueueGenericSend+0x94>
                {
                    taskYIELD_WITHIN_API();
 8002504:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <xQueueGenericSend+0x1d0>)
 8002506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	e772      	b.n	80023fc <xQueueGenericSend+0x94>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002518:	f000 f87a 	bl	8002610 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800251c:	f000 fd36 	bl	8002f8c <xTaskResumeAll>
 8002520:	e76c      	b.n	80023fc <xQueueGenericSend+0x94>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002524:	f000 f874 	bl	8002610 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002528:	f000 fd30 	bl	8002f8c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 800252c:	2300      	movs	r3, #0
        }
    }
}
 800252e:	4618      	mov	r0, r3
 8002530:	3730      	adds	r7, #48	@ 0x30
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	e000ed04 	.word	0xe000ed04

0800253c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002550:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10d      	bne.n	8002576 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d14d      	bne.n	80025fe <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	4618      	mov	r0, r3
 8002568:	f001 f9e8 	bl	800393c <xTaskPriorityDisinherit>
 800256c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	e043      	b.n	80025fe <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d119      	bne.n	80025b0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6858      	ldr	r0, [r3, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002584:	461a      	mov	r2, r3
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	f002 fc4a 	bl	8004e20 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002594:	441a      	add	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d32b      	bcc.n	80025fe <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	e026      	b.n	80025fe <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	68d8      	ldr	r0, [r3, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b8:	461a      	mov	r2, r3
 80025ba:	68b9      	ldr	r1, [r7, #8]
 80025bc:	f002 fc30 	bl	8004e20 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	425b      	negs	r3, r3
 80025ca:	441a      	add	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d207      	bcs.n	80025ec <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	425b      	negs	r3, r3
 80025e6:	441a      	add	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d105      	bne.n	80025fe <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002606:	697b      	ldr	r3, [r7, #20]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002618:	f7ff fc7c 	bl	8001f14 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002622:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002624:	e011      	b.n	800264a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	2b00      	cmp	r3, #0
 800262c:	d012      	beq.n	8002654 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3324      	adds	r3, #36	@ 0x24
 8002632:	4618      	mov	r0, r3
 8002634:	f000 ff68 	bl	8003508 <xTaskRemoveFromEventList>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800263e:	f001 f8b3 	bl	80037a8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	3b01      	subs	r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800264a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264e:	2b00      	cmp	r3, #0
 8002650:	dce9      	bgt.n	8002626 <prvUnlockQueue+0x16>
 8002652:	e000      	b.n	8002656 <prvUnlockQueue+0x46>
                    break;
 8002654:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	22ff      	movs	r2, #255	@ 0xff
 800265a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800265e:	f7ff fc8b 	bl	8001f78 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002662:	f7ff fc57 	bl	8001f14 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800266c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800266e:	e011      	b.n	8002694 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d012      	beq.n	800269e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3310      	adds	r3, #16
 800267c:	4618      	mov	r0, r3
 800267e:	f000 ff43 	bl	8003508 <xTaskRemoveFromEventList>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002688:	f001 f88e 	bl	80037a8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800268c:	7bbb      	ldrb	r3, [r7, #14]
 800268e:	3b01      	subs	r3, #1
 8002690:	b2db      	uxtb	r3, r3
 8002692:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002694:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002698:	2b00      	cmp	r3, #0
 800269a:	dce9      	bgt.n	8002670 <prvUnlockQueue+0x60>
 800269c:	e000      	b.n	80026a0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800269e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	22ff      	movs	r2, #255	@ 0xff
 80026a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80026a8:	f7ff fc66 	bl	8001f78 <vPortExitCritical>
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80026bc:	f7ff fc2a 	bl	8001f14 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d102      	bne.n	80026d2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80026cc:	2301      	movs	r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	e001      	b.n	80026d6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026d6:	f7ff fc4f 	bl	8001f78 <vPortExitCritical>

    return xReturn;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <LL_DMA_IsActiveFlag_HT2>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF2)==(DMA_LISR_HTIF2));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_DMA_IsActiveFlag_TC2>:
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF2)==(DMA_LISR_TCIF2));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800271c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002720:	bf0c      	ite	eq
 8002722:	2301      	moveq	r3, #1
 8002724:	2300      	movne	r3, #0
 8002726:	b2db      	uxtb	r3, r3
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_DMA_IsActiveFlag_TC7>:
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF7)==(DMA_HISR_TCIF7));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002744:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002748:	bf0c      	ite	eq
 800274a:	2301      	moveq	r3, #1
 800274c:	2300      	movne	r3, #0
 800274e:	b2db      	uxtb	r3, r3
} 
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <LL_DMA_ClearFlag_HT2>:
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF2);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800276a:	609a      	str	r2, [r3, #8]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_DMA_ClearFlag_TC2>:
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002786:	609a      	str	r2, [r3, #8]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_DMA_ClearFlag_TC7>:
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF7);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80027a2:	60da      	str	r2, [r3, #12]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_USART_IsActiveFlag_IDLE>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	2b10      	cmp	r3, #16
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_USART_IsActiveFlag_TC>:
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e6:	2b40      	cmp	r3, #64	@ 0x40
 80027e8:	bf0c      	ite	eq
 80027ea:	2301      	moveq	r3, #1
 80027ec:	2300      	movne	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_USART_ClearFlag_TC>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800280a:	601a      	str	r2, [r3, #0]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_USART_ClearFlag_RXNE>:
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f06f 0220 	mvn.w	r2, #32
 8002826:	601a      	str	r2, [r3, #0]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <NMI_Handler>:

#include "main.h"
#include "stm32f4xx_it.h"

void NMI_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0

   while (1)
 8002838:	bf00      	nop
 800283a:	e7fd      	b.n	8002838 <NMI_Handler+0x4>

0800283c <HardFault_Handler>:
  {
  }

}
void HardFault_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0

  while (1)
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <HardFault_Handler+0x4>

08002844 <MemManage_Handler>:

  }
}

void MemManage_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0

  while (1)
 8002848:	bf00      	nop
 800284a:	e7fd      	b.n	8002848 <MemManage_Handler+0x4>

0800284c <BusFault_Handler>:

  }
}

void BusFault_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0

  while (1)
 8002850:	bf00      	nop
 8002852:	e7fd      	b.n	8002850 <BusFault_Handler+0x4>

08002854 <UsageFault_Handler>:

  }
}

void UsageFault_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0

  while (1)
 8002858:	bf00      	nop
 800285a:	e7fd      	b.n	8002858 <UsageFault_Handler+0x4>

0800285c <DebugMon_Handler>:
  }
}


void DebugMon_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0

}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <TIM1_BRK_TIM9_IRQHandler>:


void TIM1_BRK_TIM9_IRQHandler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0


}
 800286e:	bf00      	nop
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <TIM1_UP_TIM10_IRQHandler>:


void TIM1_UP_TIM10_IRQHandler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART1))
 800288c:	4809      	ldr	r0, [pc, #36]	@ (80028b4 <USART1_IRQHandler+0x2c>)
 800288e:	f7ff ff8f 	bl	80027b0 <LL_USART_IsActiveFlag_IDLE>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <USART1_IRQHandler+0x16>
		{
			LL_USART_ClearFlag_RXNE(USART1);
 8002898:	4806      	ldr	r0, [pc, #24]	@ (80028b4 <USART1_IRQHandler+0x2c>)
 800289a:	f7ff ffbd 	bl	8002818 <LL_USART_ClearFlag_RXNE>
			//UART_RX_Callback();
		}
	if(LL_USART_IsActiveFlag_TC(USART1))
 800289e:	4805      	ldr	r0, [pc, #20]	@ (80028b4 <USART1_IRQHandler+0x2c>)
 80028a0:	f7ff ff99 	bl	80027d6 <LL_USART_IsActiveFlag_TC>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <USART1_IRQHandler+0x28>
		{
			LL_USART_ClearFlag_TC(USART1);
 80028aa:	4802      	ldr	r0, [pc, #8]	@ (80028b4 <USART1_IRQHandler+0x2c>)
 80028ac:	f7ff ffa6 	bl	80027fc <LL_USART_ClearFlag_TC>
		}
}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40011000 	.word	0x40011000

080028b8 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC2(DMA2))
 80028bc:	480b      	ldr	r0, [pc, #44]	@ (80028ec <DMA2_Stream2_IRQHandler+0x34>)
 80028be:	f7ff ff25 	bl	800270c <LL_DMA_IsActiveFlag_TC2>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d004      	beq.n	80028d2 <DMA2_Stream2_IRQHandler+0x1a>
	{
		LL_DMA_ClearFlag_TC2(DMA2);
 80028c8:	4808      	ldr	r0, [pc, #32]	@ (80028ec <DMA2_Stream2_IRQHandler+0x34>)
 80028ca:	f7ff ff55 	bl	8002778 <LL_DMA_ClearFlag_TC2>
		UART_RX_Callback();
 80028ce:	f7fe fe93 	bl	80015f8 <UART_RX_Callback>
	}
	if(LL_DMA_IsActiveFlag_HT2(DMA2))
 80028d2:	4806      	ldr	r0, [pc, #24]	@ (80028ec <DMA2_Stream2_IRQHandler+0x34>)
 80028d4:	f7ff ff06 	bl	80026e4 <LL_DMA_IsActiveFlag_HT2>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d004      	beq.n	80028e8 <DMA2_Stream2_IRQHandler+0x30>
	{
		LL_DMA_ClearFlag_HT2(DMA2);
 80028de:	4803      	ldr	r0, [pc, #12]	@ (80028ec <DMA2_Stream2_IRQHandler+0x34>)
 80028e0:	f7ff ff3c 	bl	800275c <LL_DMA_ClearFlag_HT2>
		UART_RX_Callback();
 80028e4:	f7fe fe88 	bl	80015f8 <UART_RX_Callback>
	}
}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40026400 	.word	0x40026400

080028f0 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA2))
 80028f4:	4805      	ldr	r0, [pc, #20]	@ (800290c <DMA2_Stream7_IRQHandler+0x1c>)
 80028f6:	f7ff ff1d 	bl	8002734 <LL_DMA_IsActiveFlag_TC7>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <DMA2_Stream7_IRQHandler+0x16>
	{
		LL_DMA_ClearFlag_TC7(DMA2);
 8002900:	4802      	ldr	r0, [pc, #8]	@ (800290c <DMA2_Stream7_IRQHandler+0x1c>)
 8002902:	f7ff ff47 	bl	8002794 <LL_DMA_ClearFlag_TC7>
	}
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40026400 	.word	0x40026400

08002910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002918:	4a14      	ldr	r2, [pc, #80]	@ (800296c <_sbrk+0x5c>)
 800291a:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <_sbrk+0x60>)
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002924:	4b13      	ldr	r3, [pc, #76]	@ (8002974 <_sbrk+0x64>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800292c:	4b11      	ldr	r3, [pc, #68]	@ (8002974 <_sbrk+0x64>)
 800292e:	4a12      	ldr	r2, [pc, #72]	@ (8002978 <_sbrk+0x68>)
 8002930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002932:	4b10      	ldr	r3, [pc, #64]	@ (8002974 <_sbrk+0x64>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	429a      	cmp	r2, r3
 800293e:	d207      	bcs.n	8002950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002940:	f002 fa42 	bl	8004dc8 <__errno>
 8002944:	4603      	mov	r3, r0
 8002946:	220c      	movs	r2, #12
 8002948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
 800294e:	e009      	b.n	8002964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002950:	4b08      	ldr	r3, [pc, #32]	@ (8002974 <_sbrk+0x64>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002956:	4b07      	ldr	r3, [pc, #28]	@ (8002974 <_sbrk+0x64>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	4a05      	ldr	r2, [pc, #20]	@ (8002974 <_sbrk+0x64>)
 8002960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002962:	68fb      	ldr	r3, [r7, #12]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20020000 	.word	0x20020000
 8002970:	00000400 	.word	0x00000400
 8002974:	2000012c 	.word	0x2000012c
 8002978:	200003b8 	.word	0x200003b8

0800297c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002980:	4b06      	ldr	r3, [pc, #24]	@ (800299c <SystemInit+0x20>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002986:	4a05      	ldr	r2, [pc, #20]	@ (800299c <SystemInit+0x20>)
 8002988:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800298c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	@ 0x28
 80029a4:	af04      	add	r7, sp, #16
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fe46 	bl	8001644 <pvPortMalloc>
 80029b8:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80029c0:	205c      	movs	r0, #92	@ 0x5c
 80029c2:	f7fe fe3f 	bl	8001644 <pvPortMalloc>
 80029c6:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80029ce:	225c      	movs	r2, #92	@ 0x5c
 80029d0:	2100      	movs	r1, #0
 80029d2:	6978      	ldr	r0, [r7, #20]
 80029d4:	f002 f9e0 	bl	8004d98 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80029de:	e005      	b.n	80029ec <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80029e0:	6938      	ldr	r0, [r7, #16]
 80029e2:	f7fe fe46 	bl	8001672 <vPortFree>
 80029e6:	e001      	b.n	80029ec <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00d      	beq.n	8002a0e <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029f2:	2300      	movs	r3, #0
 80029f4:	9303      	str	r3, [sp, #12]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	9302      	str	r3, [sp, #8]
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f828 	bl	8002a5e <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002a0e:	697b      	ldr	r3, [r7, #20]
    }
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f7ff ffb3 	bl	80029a0 <prvCreateTask>
 8002a3a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002a42:	6938      	ldr	r0, [r7, #16]
 8002a44:	f000 f89c 	bl	8002b80 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	e002      	b.n	8002a54 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8002a54:	697b      	ldr	r3, [r7, #20]
    }
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b088      	sub	sp, #32
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	461a      	mov	r2, r3
 8002a76:	21a5      	movs	r1, #165	@ 0xa5
 8002a78:	f002 f98e 	bl	8004d98 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a86:	3b01      	subs	r3, #1
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	f023 0307 	bic.w	r3, r3, #7
 8002a94:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00b      	beq.n	8002ab8 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8002aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	617b      	str	r3, [r7, #20]
}
 8002ab2:	bf00      	nop
 8002ab4:	bf00      	nop
 8002ab6:	e7fd      	b.n	8002ab4 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01e      	beq.n	8002afc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	e012      	b.n	8002aea <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	4413      	add	r3, r2
 8002aca:	7819      	ldrb	r1, [r3, #0]
 8002acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3334      	adds	r3, #52	@ 0x34
 8002ad4:	460a      	mov	r2, r1
 8002ad6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d006      	beq.n	8002af2 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	2b0f      	cmp	r3, #15
 8002aee:	d9e9      	bls.n	8002ac4 <prvInitialiseNewTask+0x66>
 8002af0:	e000      	b.n	8002af4 <prvInitialiseNewTask+0x96>
            {
                break;
 8002af2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d90b      	bls.n	8002b1a <prvInitialiseNewTask+0xbc>
    __asm volatile
 8002b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b06:	f383 8811 	msr	BASEPRI, r3
 8002b0a:	f3bf 8f6f 	isb	sy
 8002b0e:	f3bf 8f4f 	dsb	sy
 8002b12:	613b      	str	r3, [r7, #16]
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	e7fd      	b.n	8002b16 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d901      	bls.n	8002b24 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b20:	2308      	movs	r3, #8
 8002b22:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b28:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b2e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b32:	3304      	adds	r3, #4
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fe fdce 	bl	80016d6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3c:	3318      	adds	r3, #24
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe fdc9 	bl	80016d6 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b48:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4c:	f1c3 0209 	rsb	r2, r3, #9
 8002b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b52:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b58:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	68f9      	ldr	r1, [r7, #12]
 8002b5e:	69b8      	ldr	r0, [r7, #24]
 8002b60:	f7ff f858 	bl	8001c14 <pxPortInitialiseStack>
 8002b64:	4602      	mov	r2, r0
 8002b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b68:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b74:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b76:	bf00      	nop
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002b88:	f7ff f9c4 	bl	8001f14 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks += ( UBaseType_t ) 1U;
 8002b8c:	4b41      	ldr	r3, [pc, #260]	@ (8002c94 <prvAddNewTaskToReadyList+0x114>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3301      	adds	r3, #1
 8002b92:	4a40      	ldr	r2, [pc, #256]	@ (8002c94 <prvAddNewTaskToReadyList+0x114>)
 8002b94:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002b96:	4b40      	ldr	r3, [pc, #256]	@ (8002c98 <prvAddNewTaskToReadyList+0x118>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d109      	bne.n	8002bb2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002b9e:	4a3e      	ldr	r2, [pc, #248]	@ (8002c98 <prvAddNewTaskToReadyList+0x118>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8002c94 <prvAddNewTaskToReadyList+0x114>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d110      	bne.n	8002bce <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002bac:	f000 fe22 	bl	80037f4 <prvInitialiseTaskLists>
 8002bb0:	e00d      	b.n	8002bce <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002bb2:	4b3a      	ldr	r3, [pc, #232]	@ (8002c9c <prvAddNewTaskToReadyList+0x11c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bba:	4b37      	ldr	r3, [pc, #220]	@ (8002c98 <prvAddNewTaskToReadyList+0x118>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d802      	bhi.n	8002bce <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002bc8:	4a33      	ldr	r2, [pc, #204]	@ (8002c98 <prvAddNewTaskToReadyList+0x118>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002bce:	4b34      	ldr	r3, [pc, #208]	@ (8002ca0 <prvAddNewTaskToReadyList+0x120>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	4a32      	ldr	r2, [pc, #200]	@ (8002ca0 <prvAddNewTaskToReadyList+0x120>)
 8002bd6:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bd8:	4b31      	ldr	r3, [pc, #196]	@ (8002ca0 <prvAddNewTaskToReadyList+0x120>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be4:	2201      	movs	r2, #1
 8002be6:	409a      	lsls	r2, r3
 8002be8:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca4 <prvAddNewTaskToReadyList+0x124>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca4 <prvAddNewTaskToReadyList+0x124>)
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bf6:	492c      	ldr	r1, [pc, #176]	@ (8002ca8 <prvAddNewTaskToReadyList+0x128>)
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3304      	adds	r3, #4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	609a      	str	r2, [r3, #8]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	3204      	adds	r2, #4
 8002c1e:	605a      	str	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	1d1a      	adds	r2, r3, #4
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca8 <prvAddNewTaskToReadyList+0x128>)
 8002c36:	441a      	add	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	615a      	str	r2, [r3, #20]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c40:	4919      	ldr	r1, [pc, #100]	@ (8002ca8 <prvAddNewTaskToReadyList+0x128>)
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c52:	1c59      	adds	r1, r3, #1
 8002c54:	4814      	ldr	r0, [pc, #80]	@ (8002ca8 <prvAddNewTaskToReadyList+0x128>)
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4403      	add	r3, r0
 8002c60:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002c62:	f7ff f989 	bl	8001f78 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002c66:	4b0d      	ldr	r3, [pc, #52]	@ (8002c9c <prvAddNewTaskToReadyList+0x11c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00e      	beq.n	8002c8c <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <prvAddNewTaskToReadyList+0x118>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d207      	bcs.n	8002c8c <prvAddNewTaskToReadyList+0x10c>
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <prvAddNewTaskToReadyList+0x12c>)
 8002c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000244 	.word	0x20000244
 8002c98:	20000130 	.word	0x20000130
 8002c9c:	20000250 	.word	0x20000250
 8002ca0:	20000260 	.word	0x20000260
 8002ca4:	2000024c 	.word	0x2000024c
 8002ca8:	20000134 	.word	0x20000134
 8002cac:	e000ed04 	.word	0xe000ed04

08002cb0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8002cbc:	f7ff f92a 	bl	8001f14 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <vTaskDelete+0x1c>
 8002cc6:	4b41      	ldr	r3, [pc, #260]	@ (8002dcc <vTaskDelete+0x11c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	e000      	b.n	8002cce <vTaskDelete+0x1e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe fd68 	bl	80017aa <uxListRemove>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d115      	bne.n	8002d0c <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ce4:	493a      	ldr	r1, [pc, #232]	@ (8002dd0 <vTaskDelete+0x120>)
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10a      	bne.n	8002d0c <vTaskDelete+0x5c>
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43da      	mvns	r2, r3
 8002d02:	4b34      	ldr	r3, [pc, #208]	@ (8002dd4 <vTaskDelete+0x124>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4013      	ands	r3, r2
 8002d08:	4a32      	ldr	r2, [pc, #200]	@ (8002dd4 <vTaskDelete+0x124>)
 8002d0a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d004      	beq.n	8002d1e <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	3318      	adds	r3, #24
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe fd46 	bl	80017aa <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd8 <vTaskDelete+0x128>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3301      	adds	r3, #1
 8002d24:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd8 <vTaskDelete+0x128>)
 8002d26:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8002d28:	4b28      	ldr	r3, [pc, #160]	@ (8002dcc <vTaskDelete+0x11c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d101      	bne.n	8002d36 <vTaskDelete+0x86>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <vTaskDelete+0x88>
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8002d3a:	4b28      	ldr	r3, [pc, #160]	@ (8002ddc <vTaskDelete+0x12c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d010      	beq.n	8002d64 <vTaskDelete+0xb4>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00d      	beq.n	8002d64 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4824      	ldr	r0, [pc, #144]	@ (8002de0 <vTaskDelete+0x130>)
 8002d50:	f7fe fcce 	bl	80016f0 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002d54:	4b23      	ldr	r3, [pc, #140]	@ (8002de4 <vTaskDelete+0x134>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	4a22      	ldr	r2, [pc, #136]	@ (8002de4 <vTaskDelete+0x134>)
 8002d5c:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	e006      	b.n	8002d72 <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002d64:	4b20      	ldr	r3, [pc, #128]	@ (8002de8 <vTaskDelete+0x138>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002de8 <vTaskDelete+0x138>)
 8002d6c:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002d6e:	f000 fdb9 	bl	80038e4 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002d72:	f7ff f901 	bl	8001f78 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d002      	beq.n	8002d82 <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 8002d7c:	6938      	ldr	r0, [r7, #16]
 8002d7e:	f000 fda1 	bl	80038c4 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8002d82:	4b16      	ldr	r3, [pc, #88]	@ (8002ddc <vTaskDelete+0x12c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d01c      	beq.n	8002dc4 <vTaskDelete+0x114>
            {
                if( pxTCB == pxCurrentTCB )
 8002d8a:	4b10      	ldr	r3, [pc, #64]	@ (8002dcc <vTaskDelete+0x11c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d117      	bne.n	8002dc4 <vTaskDelete+0x114>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8002d94:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <vTaskDelete+0x13c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00b      	beq.n	8002db4 <vTaskDelete+0x104>
    __asm volatile
 8002d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	60bb      	str	r3, [r7, #8]
}
 8002dae:	bf00      	nop
 8002db0:	bf00      	nop
 8002db2:	e7fd      	b.n	8002db0 <vTaskDelete+0x100>
                    taskYIELD_WITHIN_API();
 8002db4:	4b0e      	ldr	r3, [pc, #56]	@ (8002df0 <vTaskDelete+0x140>)
 8002db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 8002dc4:	bf00      	nop
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000130 	.word	0x20000130
 8002dd0:	20000134 	.word	0x20000134
 8002dd4:	2000024c 	.word	0x2000024c
 8002dd8:	20000260 	.word	0x20000260
 8002ddc:	20000250 	.word	0x20000250
 8002de0:	2000022c 	.word	0x2000022c
 8002de4:	20000240 	.word	0x20000240
 8002de8:	20000244 	.word	0x20000244
 8002dec:	2000026c 	.word	0x2000026c
 8002df0:	e000ed04 	.word	0xe000ed04

08002df4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d018      	beq.n	8002e38 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8002e06:	f000 f8b3 	bl	8002f70 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8002e0a:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <vTaskDelay+0x64>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d00b      	beq.n	8002e2a <vTaskDelay+0x36>
    __asm volatile
 8002e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	60bb      	str	r3, [r7, #8]
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	e7fd      	b.n	8002e26 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 ffb7 	bl	8003da0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002e32:	f000 f8ab 	bl	8002f8c <xTaskResumeAll>
 8002e36:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d107      	bne.n	8002e4e <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8002e3e:	4b07      	ldr	r3, [pc, #28]	@ (8002e5c <vTaskDelay+0x68>)
 8002e40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	2000026c 	.word	0x2000026c
 8002e5c:	e000ed04 	.word	0xe000ed04

08002e60 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	@ 0x28
 8002e64:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	e011      	b.n	8002e98 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002e74:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee8 <prvCreateIdleTasks+0x88>)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	4413      	add	r3, r2
 8002e7a:	7819      	ldrb	r1, [r3, #0]
 8002e7c:	463a      	mov	r2, r7
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	4413      	add	r3, r2
 8002e82:	460a      	mov	r2, r1
 8002e84:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002e86:	463a      	mov	r2, r7
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d006      	beq.n	8002ea0 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	3301      	adds	r3, #1
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2b0f      	cmp	r3, #15
 8002e9c:	ddea      	ble.n	8002e74 <prvCreateIdleTasks+0x14>
 8002e9e:	e000      	b.n	8002ea2 <prvCreateIdleTasks+0x42>
        {
            break;
 8002ea0:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	e015      	b.n	8002ed4 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002ea8:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <prvCreateIdleTasks+0x8c>)
 8002eaa:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4a0f      	ldr	r2, [pc, #60]	@ (8002ef0 <prvCreateIdleTasks+0x90>)
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4639      	mov	r1, r7
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	2300      	movs	r3, #0
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	2280      	movs	r2, #128	@ 0x80
 8002ec0:	6938      	ldr	r0, [r7, #16]
 8002ec2:	f7ff fda9 	bl	8002a18 <xTaskCreate>
 8002ec6:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d006      	beq.n	8002edc <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	61bb      	str	r3, [r7, #24]
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	dde6      	ble.n	8002ea8 <prvCreateIdleTasks+0x48>
 8002eda:	e000      	b.n	8002ede <prvCreateIdleTasks+0x7e>
        {
            break;
 8002edc:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002ede:	69fb      	ldr	r3, [r7, #28]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3720      	adds	r7, #32
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	08004f00 	.word	0x08004f00
 8002eec:	080037c1 	.word	0x080037c1
 8002ef0:	20000268 	.word	0x20000268

08002ef4 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002efa:	f7ff ffb1 	bl	8002e60 <prvCreateIdleTasks>
 8002efe:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d116      	bne.n	8002f34 <vTaskStartScheduler+0x40>
    __asm volatile
 8002f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f0a:	f383 8811 	msr	BASEPRI, r3
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	f3bf 8f4f 	dsb	sy
 8002f16:	60bb      	str	r3, [r7, #8]
}
 8002f18:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f1a:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <vTaskStartScheduler+0x6c>)
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f22:	4b10      	ldr	r3, [pc, #64]	@ (8002f64 <vTaskStartScheduler+0x70>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f28:	4b0f      	ldr	r3, [pc, #60]	@ (8002f68 <vTaskStartScheduler+0x74>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002f2e:	f7fe ff01 	bl	8001d34 <xPortStartScheduler>
 8002f32:	e00f      	b.n	8002f54 <vTaskStartScheduler+0x60>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3a:	d10b      	bne.n	8002f54 <vTaskStartScheduler+0x60>
    __asm volatile
 8002f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	607b      	str	r3, [r7, #4]
}
 8002f4e:	bf00      	nop
 8002f50:	bf00      	nop
 8002f52:	e7fd      	b.n	8002f50 <vTaskStartScheduler+0x5c>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f54:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <vTaskStartScheduler+0x78>)
 8002f56:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8002f58:	bf00      	nop
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000264 	.word	0x20000264
 8002f64:	20000250 	.word	0x20000250
 8002f68:	20000248 	.word	0x20000248
 8002f6c:	20000008 	.word	0x20000008

08002f70 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended += ( UBaseType_t ) 1U;
 8002f74:	4b04      	ldr	r3, [pc, #16]	@ (8002f88 <vTaskSuspendAll+0x18>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	4a03      	ldr	r2, [pc, #12]	@ (8002f88 <vTaskSuspendAll+0x18>)
 8002f7c:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8002f7e:	bf00      	nop
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	2000026c 	.word	0x2000026c

08002f8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002f9a:	f7fe ffbb 	bl	8001f14 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002fa2:	4b75      	ldr	r3, [pc, #468]	@ (8003178 <xTaskResumeAll+0x1ec>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10b      	bne.n	8002fc2 <xTaskResumeAll+0x36>
    __asm volatile
 8002faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	603b      	str	r3, [r7, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	e7fd      	b.n	8002fbe <xTaskResumeAll+0x32>

            uxSchedulerSuspended -= ( UBaseType_t ) 1U;
 8002fc2:	4b6d      	ldr	r3, [pc, #436]	@ (8003178 <xTaskResumeAll+0x1ec>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	4a6b      	ldr	r2, [pc, #428]	@ (8003178 <xTaskResumeAll+0x1ec>)
 8002fca:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002fcc:	4b6a      	ldr	r3, [pc, #424]	@ (8003178 <xTaskResumeAll+0x1ec>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f040 80ca 	bne.w	800316a <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fd6:	4b69      	ldr	r3, [pc, #420]	@ (800317c <xTaskResumeAll+0x1f0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80c5 	beq.w	800316a <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fe0:	e08e      	b.n	8003100 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002fe2:	4b67      	ldr	r3, [pc, #412]	@ (8003180 <xTaskResumeAll+0x1f4>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	6a12      	ldr	r2, [r2, #32]
 8002ff8:	609a      	str	r2, [r3, #8]
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	69d2      	ldr	r2, [r2, #28]
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	3318      	adds	r3, #24
 800300c:	429a      	cmp	r2, r3
 800300e:	d103      	bne.n	8003018 <xTaskResumeAll+0x8c>
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	6a1a      	ldr	r2, [r3, #32]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2200      	movs	r2, #0
 800301c:	629a      	str	r2, [r3, #40]	@ 0x28
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	1e5a      	subs	r2, r3, #1
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	69fa      	ldr	r2, [r7, #28]
 8003034:	68d2      	ldr	r2, [r2, #12]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	6892      	ldr	r2, [r2, #8]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3304      	adds	r3, #4
 800304a:	429a      	cmp	r2, r3
 800304c:	d103      	bne.n	8003056 <xTaskResumeAll+0xca>
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	2200      	movs	r2, #0
 800305a:	615a      	str	r2, [r3, #20]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	1e5a      	subs	r2, r3, #1
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306a:	2201      	movs	r2, #1
 800306c:	409a      	lsls	r2, r3
 800306e:	4b45      	ldr	r3, [pc, #276]	@ (8003184 <xTaskResumeAll+0x1f8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	4a43      	ldr	r2, [pc, #268]	@ (8003184 <xTaskResumeAll+0x1f8>)
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800307c:	4942      	ldr	r1, [pc, #264]	@ (8003188 <xTaskResumeAll+0x1fc>)
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	3304      	adds	r3, #4
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	60da      	str	r2, [r3, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	3204      	adds	r2, #4
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	1d1a      	adds	r2, r3, #4
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	609a      	str	r2, [r3, #8]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4a33      	ldr	r2, [pc, #204]	@ (8003188 <xTaskResumeAll+0x1fc>)
 80030bc:	441a      	add	r2, r3
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	615a      	str	r2, [r3, #20]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c6:	4930      	ldr	r1, [pc, #192]	@ (8003188 <xTaskResumeAll+0x1fc>)
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030d8:	1c59      	adds	r1, r3, #1
 80030da:	482b      	ldr	r0, [pc, #172]	@ (8003188 <xTaskResumeAll+0x1fc>)
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4403      	add	r3, r0
 80030e6:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ec:	4b27      	ldr	r3, [pc, #156]	@ (800318c <xTaskResumeAll+0x200>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d904      	bls.n	8003100 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80030f6:	4a26      	ldr	r2, [pc, #152]	@ (8003190 <xTaskResumeAll+0x204>)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2101      	movs	r1, #1
 80030fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003100:	4b1f      	ldr	r3, [pc, #124]	@ (8003180 <xTaskResumeAll+0x1f4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f47f af6c 	bne.w	8002fe2 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003110:	f000 fbe8 	bl	80038e4 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003114:	4b1f      	ldr	r3, [pc, #124]	@ (8003194 <xTaskResumeAll+0x208>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d012      	beq.n	8003146 <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003120:	f000 f83c 	bl	800319c <xTaskIncrementTick>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d004      	beq.n	8003134 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800312a:	4a19      	ldr	r2, [pc, #100]	@ (8003190 <xTaskResumeAll+0x204>)
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	2101      	movs	r1, #1
 8003130:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	3b01      	subs	r3, #1
 8003138:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1ef      	bne.n	8003120 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8003140:	4b14      	ldr	r3, [pc, #80]	@ (8003194 <xTaskResumeAll+0x208>)
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003146:	4a12      	ldr	r2, [pc, #72]	@ (8003190 <xTaskResumeAll+0x204>)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003152:	2301      	movs	r3, #1
 8003154:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003156:	4b0d      	ldr	r3, [pc, #52]	@ (800318c <xTaskResumeAll+0x200>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4b0f      	ldr	r3, [pc, #60]	@ (8003198 <xTaskResumeAll+0x20c>)
 800315c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	f3bf 8f4f 	dsb	sy
 8003166:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800316a:	f7fe ff05 	bl	8001f78 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 800316e:	69bb      	ldr	r3, [r7, #24]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	2000026c 	.word	0x2000026c
 800317c:	20000244 	.word	0x20000244
 8003180:	20000218 	.word	0x20000218
 8003184:	2000024c 	.word	0x2000024c
 8003188:	20000134 	.word	0x20000134
 800318c:	20000130 	.word	0x20000130
 8003190:	20000258 	.word	0x20000258
 8003194:	20000254 	.word	0x20000254
 8003198:	e000ed04 	.word	0xe000ed04

0800319c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	@ 0x28
 80031a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80031a6:	4b83      	ldr	r3, [pc, #524]	@ (80033b4 <xTaskIncrementTick+0x218>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f040 80f5 	bne.w	800339a <xTaskIncrementTick+0x1fe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031b0:	4b81      	ldr	r3, [pc, #516]	@ (80033b8 <xTaskIncrementTick+0x21c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3301      	adds	r3, #1
 80031b6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80031b8:	4a7f      	ldr	r2, [pc, #508]	@ (80033b8 <xTaskIncrementTick+0x21c>)
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d121      	bne.n	8003208 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80031c4:	4b7d      	ldr	r3, [pc, #500]	@ (80033bc <xTaskIncrementTick+0x220>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <xTaskIncrementTick+0x4a>
    __asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	607b      	str	r3, [r7, #4]
}
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
 80031e4:	e7fd      	b.n	80031e2 <xTaskIncrementTick+0x46>
 80031e6:	4b75      	ldr	r3, [pc, #468]	@ (80033bc <xTaskIncrementTick+0x220>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	4b74      	ldr	r3, [pc, #464]	@ (80033c0 <xTaskIncrementTick+0x224>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a72      	ldr	r2, [pc, #456]	@ (80033bc <xTaskIncrementTick+0x220>)
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	4a72      	ldr	r2, [pc, #456]	@ (80033c0 <xTaskIncrementTick+0x224>)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	4b72      	ldr	r3, [pc, #456]	@ (80033c4 <xTaskIncrementTick+0x228>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3301      	adds	r3, #1
 8003200:	4a70      	ldr	r2, [pc, #448]	@ (80033c4 <xTaskIncrementTick+0x228>)
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	f000 fb6e 	bl	80038e4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003208:	4b6f      	ldr	r3, [pc, #444]	@ (80033c8 <xTaskIncrementTick+0x22c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6a3a      	ldr	r2, [r7, #32]
 800320e:	429a      	cmp	r2, r3
 8003210:	f0c0 80a8 	bcc.w	8003364 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003214:	4b69      	ldr	r3, [pc, #420]	@ (80033bc <xTaskIncrementTick+0x220>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d104      	bne.n	8003228 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800321e:	4b6a      	ldr	r3, [pc, #424]	@ (80033c8 <xTaskIncrementTick+0x22c>)
 8003220:	f04f 32ff 	mov.w	r2, #4294967295
 8003224:	601a      	str	r2, [r3, #0]
                    break;
 8003226:	e09d      	b.n	8003364 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003228:	4b64      	ldr	r3, [pc, #400]	@ (80033bc <xTaskIncrementTick+0x220>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003238:	6a3a      	ldr	r2, [r7, #32]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	429a      	cmp	r2, r3
 800323e:	d203      	bcs.n	8003248 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003240:	4a61      	ldr	r2, [pc, #388]	@ (80033c8 <xTaskIncrementTick+0x22c>)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	6013      	str	r3, [r2, #0]
                        break;
 8003246:	e08d      	b.n	8003364 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	68d2      	ldr	r2, [r2, #12]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	6892      	ldr	r2, [r2, #8]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	3304      	adds	r3, #4
 800326a:	429a      	cmp	r2, r3
 800326c:	d103      	bne.n	8003276 <xTaskIncrementTick+0xda>
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2200      	movs	r2, #0
 800327a:	615a      	str	r2, [r3, #20]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	1e5a      	subs	r2, r3, #1
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328a:	2b00      	cmp	r3, #0
 800328c:	d01e      	beq.n	80032cc <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	6a12      	ldr	r2, [r2, #32]
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	69d2      	ldr	r2, [r2, #28]
 80032a6:	605a      	str	r2, [r3, #4]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	3318      	adds	r3, #24
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d103      	bne.n	80032bc <xTaskIncrementTick+0x120>
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	6a1a      	ldr	r2, [r3, #32]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	605a      	str	r2, [r3, #4]
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2200      	movs	r2, #0
 80032c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	1e5a      	subs	r2, r3, #1
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	2201      	movs	r2, #1
 80032d2:	409a      	lsls	r2, r3
 80032d4:	4b3d      	ldr	r3, [pc, #244]	@ (80033cc <xTaskIncrementTick+0x230>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4313      	orrs	r3, r2
 80032da:	4a3c      	ldr	r2, [pc, #240]	@ (80033cc <xTaskIncrementTick+0x230>)
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032e2:	493b      	ldr	r1, [pc, #236]	@ (80033d0 <xTaskIncrementTick+0x234>)
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	3304      	adds	r3, #4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	3204      	adds	r2, #4
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1d1a      	adds	r2, r3, #4
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4a2b      	ldr	r2, [pc, #172]	@ (80033d0 <xTaskIncrementTick+0x234>)
 8003322:	441a      	add	r2, r3
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	615a      	str	r2, [r3, #20]
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800332c:	4928      	ldr	r1, [pc, #160]	@ (80033d0 <xTaskIncrementTick+0x234>)
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800333e:	1c59      	adds	r1, r3, #1
 8003340:	4823      	ldr	r0, [pc, #140]	@ (80033d0 <xTaskIncrementTick+0x234>)
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4403      	add	r3, r0
 800334c:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003352:	4b20      	ldr	r3, [pc, #128]	@ (80033d4 <xTaskIncrementTick+0x238>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003358:	429a      	cmp	r2, r3
 800335a:	f67f af5b 	bls.w	8003214 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 800335e:	2301      	movs	r3, #1
 8003360:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003362:	e757      	b.n	8003214 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003364:	4b1b      	ldr	r3, [pc, #108]	@ (80033d4 <xTaskIncrementTick+0x238>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800336a:	4919      	ldr	r1, [pc, #100]	@ (80033d0 <xTaskIncrementTick+0x234>)
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d901      	bls.n	8003380 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 800337c:	2301      	movs	r3, #1
 800337e:	627b      	str	r3, [r7, #36]	@ 0x24

        #if ( configUSE_TICK_HOOK == 1 )
        {
            /* Guard against the tick hook being called when the pended tick
             * count is being unwound (when the scheduler is being unlocked). */
            if( xPendedTicks == ( TickType_t ) 0 )
 8003380:	4b15      	ldr	r3, [pc, #84]	@ (80033d8 <xTaskIncrementTick+0x23c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <xTaskIncrementTick+0x1f0>
            {
                vApplicationTickHook();
 8003388:	f7fe fbca 	bl	8001b20 <vApplicationTickHook>
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800338c:	4b13      	ldr	r3, [pc, #76]	@ (80033dc <xTaskIncrementTick+0x240>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <xTaskIncrementTick+0x20c>
                {
                    xSwitchRequired = pdTRUE;
 8003394:	2301      	movs	r3, #1
 8003396:	627b      	str	r3, [r7, #36]	@ 0x24
 8003398:	e006      	b.n	80033a8 <xTaskIncrementTick+0x20c>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800339a:	4b0f      	ldr	r3, [pc, #60]	@ (80033d8 <xTaskIncrementTick+0x23c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3301      	adds	r3, #1
 80033a0:	4a0d      	ldr	r2, [pc, #52]	@ (80033d8 <xTaskIncrementTick+0x23c>)
 80033a2:	6013      	str	r3, [r2, #0]

        /* The tick hook gets called at regular intervals, even if the
         * scheduler is locked. */
        #if ( configUSE_TICK_HOOK == 1 )
        {
            vApplicationTickHook();
 80033a4:	f7fe fbbc 	bl	8001b20 <vApplicationTickHook>
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80033a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3728      	adds	r7, #40	@ 0x28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	2000026c 	.word	0x2000026c
 80033b8:	20000248 	.word	0x20000248
 80033bc:	20000210 	.word	0x20000210
 80033c0:	20000214 	.word	0x20000214
 80033c4:	2000025c 	.word	0x2000025c
 80033c8:	20000264 	.word	0x20000264
 80033cc:	2000024c 	.word	0x2000024c
 80033d0:	20000134 	.word	0x20000134
 80033d4:	20000130 	.word	0x20000130
 80033d8:	20000254 	.word	0x20000254
 80033dc:	20000258 	.word	0x20000258

080033e0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80033e6:	4b30      	ldr	r3, [pc, #192]	@ (80034a8 <vTaskSwitchContext+0xc8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80033ee:	4b2f      	ldr	r3, [pc, #188]	@ (80034ac <vTaskSwitchContext+0xcc>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80033f4:	e053      	b.n	800349e <vTaskSwitchContext+0xbe>
            xYieldPendings[ 0 ] = pdFALSE;
 80033f6:	4b2d      	ldr	r3, [pc, #180]	@ (80034ac <vTaskSwitchContext+0xcc>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 80033fc:	4b2c      	ldr	r3, [pc, #176]	@ (80034b0 <vTaskSwitchContext+0xd0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b2b      	ldr	r3, [pc, #172]	@ (80034b0 <vTaskSwitchContext+0xd0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003408:	429a      	cmp	r2, r3
 800340a:	d809      	bhi.n	8003420 <vTaskSwitchContext+0x40>
 800340c:	4b28      	ldr	r3, [pc, #160]	@ (80034b0 <vTaskSwitchContext+0xd0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3334      	adds	r3, #52	@ 0x34
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	4b26      	ldr	r3, [pc, #152]	@ (80034b0 <vTaskSwitchContext+0xd0>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6979      	ldr	r1, [r7, #20]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fe fb9e 	bl	8001b5c <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003420:	4b24      	ldr	r3, [pc, #144]	@ (80034b4 <vTaskSwitchContext+0xd4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60bb      	str	r3, [r7, #8]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	fab3 f383 	clz	r3, r3
 800342c:	71fb      	strb	r3, [r7, #7]
        return ucReturn;
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	f1c3 031f 	rsb	r3, r3, #31
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	4920      	ldr	r1, [pc, #128]	@ (80034b8 <vTaskSwitchContext+0xd8>)
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10b      	bne.n	8003462 <vTaskSwitchContext+0x82>
    __asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	603b      	str	r3, [r7, #0]
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	e7fd      	b.n	800345e <vTaskSwitchContext+0x7e>
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4a12      	ldr	r2, [pc, #72]	@ (80034b8 <vTaskSwitchContext+0xd8>)
 800346e:	4413      	add	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	605a      	str	r2, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3308      	adds	r3, #8
 8003484:	429a      	cmp	r2, r3
 8003486:	d103      	bne.n	8003490 <vTaskSwitchContext+0xb0>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	4a06      	ldr	r2, [pc, #24]	@ (80034b0 <vTaskSwitchContext+0xd0>)
 8003498:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800349a:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <vTaskSwitchContext+0xd0>)
 800349c:	681b      	ldr	r3, [r3, #0]
    }
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	2000026c 	.word	0x2000026c
 80034ac:	20000258 	.word	0x20000258
 80034b0:	20000130 	.word	0x20000130
 80034b4:	2000024c 	.word	0x2000024c
 80034b8:	20000134 	.word	0x20000134

080034bc <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10b      	bne.n	80034e4 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	60fb      	str	r3, [r7, #12]
}
 80034de:	bf00      	nop
 80034e0:	bf00      	nop
 80034e2:	e7fd      	b.n	80034e0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034e4:	4b07      	ldr	r3, [pc, #28]	@ (8003504 <vTaskPlaceOnEventList+0x48>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3318      	adds	r3, #24
 80034ea:	4619      	mov	r1, r3
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7fe f923 	bl	8001738 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034f2:	2101      	movs	r1, #1
 80034f4:	6838      	ldr	r0, [r7, #0]
 80034f6:	f000 fc53 	bl	8003da0 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000130 	.word	0x20000130

08003508 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003508:	b480      	push	{r7}
 800350a:	b08b      	sub	sp, #44	@ 0x2c
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10b      	bne.n	8003536 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 800351e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	60fb      	str	r3, [r7, #12]
}
 8003530:	bf00      	nop
 8003532:	bf00      	nop
 8003534:	e7fd      	b.n	8003532 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	6a3a      	ldr	r2, [r7, #32]
 8003542:	6a12      	ldr	r2, [r2, #32]
 8003544:	609a      	str	r2, [r3, #8]
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	6a3a      	ldr	r2, [r7, #32]
 800354c:	69d2      	ldr	r2, [r2, #28]
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	3318      	adds	r3, #24
 8003558:	429a      	cmp	r2, r3
 800355a:	d103      	bne.n	8003564 <xTaskRemoveFromEventList+0x5c>
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	6a1a      	ldr	r2, [r3, #32]
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	605a      	str	r2, [r3, #4]
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	2200      	movs	r2, #0
 8003568:	629a      	str	r2, [r3, #40]	@ 0x28
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	1e5a      	subs	r2, r3, #1
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003574:	4b4b      	ldr	r3, [pc, #300]	@ (80036a4 <xTaskRemoveFromEventList+0x19c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d160      	bne.n	800363e <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	6a3a      	ldr	r2, [r7, #32]
 8003588:	68d2      	ldr	r2, [r2, #12]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	6892      	ldr	r2, [r2, #8]
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	3304      	adds	r3, #4
 800359e:	429a      	cmp	r2, r3
 80035a0:	d103      	bne.n	80035aa <xTaskRemoveFromEventList+0xa2>
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	2200      	movs	r2, #0
 80035ae:	615a      	str	r2, [r3, #20]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	1e5a      	subs	r2, r3, #1
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035be:	2201      	movs	r2, #1
 80035c0:	409a      	lsls	r2, r3
 80035c2:	4b39      	ldr	r3, [pc, #228]	@ (80036a8 <xTaskRemoveFromEventList+0x1a0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	4a37      	ldr	r2, [pc, #220]	@ (80036a8 <xTaskRemoveFromEventList+0x1a0>)
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035d0:	4936      	ldr	r1, [pc, #216]	@ (80036ac <xTaskRemoveFromEventList+0x1a4>)
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3304      	adds	r3, #4
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	6a3a      	ldr	r2, [r7, #32]
 80035f6:	3204      	adds	r2, #4
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	1d1a      	adds	r2, r3, #4
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	609a      	str	r2, [r3, #8]
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4a27      	ldr	r2, [pc, #156]	@ (80036ac <xTaskRemoveFromEventList+0x1a4>)
 8003610:	441a      	add	r2, r3
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	615a      	str	r2, [r3, #20]
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800361a:	4924      	ldr	r1, [pc, #144]	@ (80036ac <xTaskRemoveFromEventList+0x1a4>)
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6a3a      	ldr	r2, [r7, #32]
 800362a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800362c:	1c59      	adds	r1, r3, #1
 800362e:	481f      	ldr	r0, [pc, #124]	@ (80036ac <xTaskRemoveFromEventList+0x1a4>)
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4403      	add	r3, r0
 800363a:	6019      	str	r1, [r3, #0]
 800363c:	e01b      	b.n	8003676 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800363e:	4b1c      	ldr	r3, [pc, #112]	@ (80036b0 <xTaskRemoveFromEventList+0x1a8>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	61bb      	str	r3, [r7, #24]
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	61da      	str	r2, [r3, #28]
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	621a      	str	r2, [r3, #32]
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	6a3a      	ldr	r2, [r7, #32]
 8003658:	3218      	adds	r2, #24
 800365a:	605a      	str	r2, [r3, #4]
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	f103 0218 	add.w	r2, r3, #24
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	609a      	str	r2, [r3, #8]
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	4a11      	ldr	r2, [pc, #68]	@ (80036b0 <xTaskRemoveFromEventList+0x1a8>)
 800366a:	629a      	str	r2, [r3, #40]	@ 0x28
 800366c:	4b10      	ldr	r3, [pc, #64]	@ (80036b0 <xTaskRemoveFromEventList+0x1a8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3301      	adds	r3, #1
 8003672:	4a0f      	ldr	r2, [pc, #60]	@ (80036b0 <xTaskRemoveFromEventList+0x1a8>)
 8003674:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800367a:	4b0e      	ldr	r3, [pc, #56]	@ (80036b4 <xTaskRemoveFromEventList+0x1ac>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003680:	429a      	cmp	r2, r3
 8003682:	d905      	bls.n	8003690 <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003684:	2301      	movs	r3, #1
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003688:	4b0b      	ldr	r3, [pc, #44]	@ (80036b8 <xTaskRemoveFromEventList+0x1b0>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e001      	b.n	8003694 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8003690:	2300      	movs	r3, #0
 8003692:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003696:	4618      	mov	r0, r3
 8003698:	372c      	adds	r7, #44	@ 0x2c
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	2000026c 	.word	0x2000026c
 80036a8:	2000024c 	.word	0x2000024c
 80036ac:	20000134 	.word	0x20000134
 80036b0:	20000218 	.word	0x20000218
 80036b4:	20000130 	.word	0x20000130
 80036b8:	20000258 	.word	0x20000258

080036bc <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036c4:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <vTaskInternalSetTimeOutState+0x24>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80036cc:	4b05      	ldr	r3, [pc, #20]	@ (80036e4 <vTaskInternalSetTimeOutState+0x28>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	2000025c 	.word	0x2000025c
 80036e4:	20000248 	.word	0x20000248

080036e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	613b      	str	r3, [r7, #16]
}
 800370a:	bf00      	nop
 800370c:	bf00      	nop
 800370e:	e7fd      	b.n	800370c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10b      	bne.n	800372e <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	60fb      	str	r3, [r7, #12]
}
 8003728:	bf00      	nop
 800372a:	bf00      	nop
 800372c:	e7fd      	b.n	800372a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800372e:	f7fe fbf1 	bl	8001f14 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003732:	4b1b      	ldr	r3, [pc, #108]	@ (80037a0 <xTaskCheckForTimeOut+0xb8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	617b      	str	r3, [r7, #20]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4b17      	ldr	r3, [pc, #92]	@ (80037a4 <xTaskCheckForTimeOut+0xbc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d00a      	beq.n	8003764 <xTaskCheckForTimeOut+0x7c>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	429a      	cmp	r2, r3
 8003756:	d305      	bcc.n	8003764 <xTaskCheckForTimeOut+0x7c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003758:	2301      	movs	r3, #1
 800375a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	e015      	b.n	8003790 <xTaskCheckForTimeOut+0xa8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	429a      	cmp	r2, r3
 800376c:	d20b      	bcs.n	8003786 <xTaskCheckForTimeOut+0x9e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	1ad2      	subs	r2, r2, r3
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff ff9e 	bl	80036bc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003780:	2300      	movs	r3, #0
 8003782:	61fb      	str	r3, [r7, #28]
 8003784:	e004      	b.n	8003790 <xTaskCheckForTimeOut+0xa8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800378c:	2301      	movs	r3, #1
 800378e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003790:	f7fe fbf2 	bl	8001f78 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8003794:	69fb      	ldr	r3, [r7, #28]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3720      	adds	r7, #32
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000248 	.word	0x20000248
 80037a4:	2000025c 	.word	0x2000025c

080037a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80037ac:	4b03      	ldr	r3, [pc, #12]	@ (80037bc <vTaskMissedYield+0x14>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 80037b2:	bf00      	nop
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	20000258 	.word	0x20000258

080037c0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80037c8:	f000 f84e 	bl	8003868 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80037cc:	4b07      	ldr	r3, [pc, #28]	@ (80037ec <prvIdleTask+0x2c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d907      	bls.n	80037e4 <prvIdleTask+0x24>
            {
                taskYIELD();
 80037d4:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <prvIdleTask+0x30>)
 80037d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	f3bf 8f6f 	isb	sy
        #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */

        #if ( configUSE_IDLE_HOOK == 1 )
        {
            /* Call the user defined function from within the idle task. */
            vApplicationIdleHook();
 80037e4:	f7fe f994 	bl	8001b10 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 80037e8:	e7ee      	b.n	80037c8 <prvIdleTask+0x8>
 80037ea:	bf00      	nop
 80037ec:	20000134 	.word	0x20000134
 80037f0:	e000ed04 	.word	0xe000ed04

080037f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037fa:	2300      	movs	r3, #0
 80037fc:	607b      	str	r3, [r7, #4]
 80037fe:	e00c      	b.n	800381a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4a10      	ldr	r2, [pc, #64]	@ (800384c <prvInitialiseTaskLists+0x58>)
 800380c:	4413      	add	r3, r2
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd ff41 	bl	8001696 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3301      	adds	r3, #1
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d9ef      	bls.n	8003800 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003820:	480b      	ldr	r0, [pc, #44]	@ (8003850 <prvInitialiseTaskLists+0x5c>)
 8003822:	f7fd ff38 	bl	8001696 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003826:	480b      	ldr	r0, [pc, #44]	@ (8003854 <prvInitialiseTaskLists+0x60>)
 8003828:	f7fd ff35 	bl	8001696 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800382c:	480a      	ldr	r0, [pc, #40]	@ (8003858 <prvInitialiseTaskLists+0x64>)
 800382e:	f7fd ff32 	bl	8001696 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003832:	480a      	ldr	r0, [pc, #40]	@ (800385c <prvInitialiseTaskLists+0x68>)
 8003834:	f7fd ff2f 	bl	8001696 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003838:	4b09      	ldr	r3, [pc, #36]	@ (8003860 <prvInitialiseTaskLists+0x6c>)
 800383a:	4a05      	ldr	r2, [pc, #20]	@ (8003850 <prvInitialiseTaskLists+0x5c>)
 800383c:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800383e:	4b09      	ldr	r3, [pc, #36]	@ (8003864 <prvInitialiseTaskLists+0x70>)
 8003840:	4a04      	ldr	r2, [pc, #16]	@ (8003854 <prvInitialiseTaskLists+0x60>)
 8003842:	601a      	str	r2, [r3, #0]
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	20000134 	.word	0x20000134
 8003850:	200001e8 	.word	0x200001e8
 8003854:	200001fc 	.word	0x200001fc
 8003858:	20000218 	.word	0x20000218
 800385c:	2000022c 	.word	0x2000022c
 8003860:	20000210 	.word	0x20000210
 8003864:	20000214 	.word	0x20000214

08003868 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800386e:	e019      	b.n	80038a4 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003870:	f7fe fb50 	bl	8001f14 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003874:	4b10      	ldr	r3, [pc, #64]	@ (80038b8 <prvCheckTasksWaitingTermination+0x50>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3304      	adds	r3, #4
 8003880:	4618      	mov	r0, r3
 8003882:	f7fd ff92 	bl	80017aa <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003886:	4b0d      	ldr	r3, [pc, #52]	@ (80038bc <prvCheckTasksWaitingTermination+0x54>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3b01      	subs	r3, #1
 800388c:	4a0b      	ldr	r2, [pc, #44]	@ (80038bc <prvCheckTasksWaitingTermination+0x54>)
 800388e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003890:	4b0b      	ldr	r3, [pc, #44]	@ (80038c0 <prvCheckTasksWaitingTermination+0x58>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3b01      	subs	r3, #1
 8003896:	4a0a      	ldr	r2, [pc, #40]	@ (80038c0 <prvCheckTasksWaitingTermination+0x58>)
 8003898:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800389a:	f7fe fb6d 	bl	8001f78 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f810 	bl	80038c4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038a4:	4b06      	ldr	r3, [pc, #24]	@ (80038c0 <prvCheckTasksWaitingTermination+0x58>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e1      	bne.n	8003870 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	2000022c 	.word	0x2000022c
 80038bc:	20000244 	.word	0x20000244
 80038c0:	20000240 	.word	0x20000240

080038c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fd fece 	bl	8001672 <vPortFree>
            vPortFree( pxTCB );
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd fecb 	bl	8001672 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003914 <prvResetNextTaskUnblockTime+0x30>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d104      	bne.n	80038fc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80038f2:	4b09      	ldr	r3, [pc, #36]	@ (8003918 <prvResetNextTaskUnblockTime+0x34>)
 80038f4:	f04f 32ff 	mov.w	r2, #4294967295
 80038f8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80038fa:	e005      	b.n	8003908 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038fc:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <prvResetNextTaskUnblockTime+0x30>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a04      	ldr	r2, [pc, #16]	@ (8003918 <prvResetNextTaskUnblockTime+0x34>)
 8003906:	6013      	str	r3, [r2, #0]
}
 8003908:	bf00      	nop
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000210 	.word	0x20000210
 8003918:	20000264 	.word	0x20000264

0800391c <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 8003922:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <xTaskGetCurrentTaskHandle+0x1c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 8003928:	687b      	ldr	r3, [r7, #4]
        }
 800392a:	4618      	mov	r0, r3
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20000130 	.word	0x20000130

0800393c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003948:	2300      	movs	r3, #0
 800394a:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 8090 	beq.w	8003a74 <xTaskPriorityDisinherit+0x138>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003954:	4b4a      	ldr	r3, [pc, #296]	@ (8003a80 <xTaskPriorityDisinherit+0x144>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	429a      	cmp	r2, r3
 800395c:	d00b      	beq.n	8003976 <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	613b      	str	r3, [r7, #16]
}
 8003970:	bf00      	nop
 8003972:	bf00      	nop
 8003974:	e7fd      	b.n	8003972 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10b      	bne.n	8003996 <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	60fb      	str	r3, [r7, #12]
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	e7fd      	b.n	8003992 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399a:	1e5a      	subs	r2, r3, #1
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d063      	beq.n	8003a74 <xTaskPriorityDisinherit+0x138>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d15f      	bne.n	8003a74 <xTaskPriorityDisinherit+0x138>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	3304      	adds	r3, #4
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fd fef6 	bl	80017aa <uxListRemove>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c8:	2201      	movs	r2, #1
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43da      	mvns	r2, r3
 80039d0:	4b2c      	ldr	r3, [pc, #176]	@ (8003a84 <xTaskPriorityDisinherit+0x148>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4013      	ands	r3, r2
 80039d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003a84 <xTaskPriorityDisinherit+0x148>)
 80039d8:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e6:	f1c3 0209 	rsb	r2, r3, #9
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f2:	2201      	movs	r2, #1
 80039f4:	409a      	lsls	r2, r3
 80039f6:	4b23      	ldr	r3, [pc, #140]	@ (8003a84 <xTaskPriorityDisinherit+0x148>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	4a21      	ldr	r2, [pc, #132]	@ (8003a84 <xTaskPriorityDisinherit+0x148>)
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a04:	4920      	ldr	r1, [pc, #128]	@ (8003a88 <xTaskPriorityDisinherit+0x14c>)
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	3304      	adds	r3, #4
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	60da      	str	r2, [r3, #12]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	3204      	adds	r2, #4
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	1d1a      	adds	r2, r3, #4
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	609a      	str	r2, [r3, #8]
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4a11      	ldr	r2, [pc, #68]	@ (8003a88 <xTaskPriorityDisinherit+0x14c>)
 8003a44:	441a      	add	r2, r3
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	615a      	str	r2, [r3, #20]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a4e:	490e      	ldr	r1, [pc, #56]	@ (8003a88 <xTaskPriorityDisinherit+0x14c>)
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a60:	1c59      	adds	r1, r3, #1
 8003a62:	4809      	ldr	r0, [pc, #36]	@ (8003a88 <xTaskPriorityDisinherit+0x14c>)
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4403      	add	r3, r0
 8003a6e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003a70:	2301      	movs	r3, #1
 8003a72:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8003a74:	69fb      	ldr	r3, [r7, #28]
    }
 8003a76:	4618      	mov	r0, r3
 8003a78:	3720      	adds	r7, #32
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000130 	.word	0x20000130
 8003a84:	2000024c 	.word	0x2000024c
 8003a88:	20000134 	.word	0x20000134

08003a8c <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <ulTaskGenericNotifyTake+0x2e>
    __asm volatile
 8003aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	613b      	str	r3, [r7, #16]
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	e7fd      	b.n	8003ab6 <ulTaskGenericNotifyTake+0x2a>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8003aba:	f7ff fa59 	bl	8002f70 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 8003abe:	f7fe fa29 	bl	8001f14 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0UL )
 8003ac2:	4b2f      	ldr	r3, [pc, #188]	@ (8003b80 <ulTaskGenericNotifyTake+0xf4>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3314      	adds	r3, #20
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10b      	bne.n	8003aec <ulTaskGenericNotifyTake+0x60>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8003ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8003b80 <ulTaskGenericNotifyTake+0xf4>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4413      	add	r3, r2
 8003adc:	3358      	adds	r3, #88	@ 0x58
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <ulTaskGenericNotifyTake+0x60>
                    {
                        xShouldBlock = pdTRUE;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8003aec:	f7fe fa44 	bl	8001f78 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d103      	bne.n	8003afe <ulTaskGenericNotifyTake+0x72>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003af6:	2101      	movs	r1, #1
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f951 	bl	8003da0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003afe:	f7ff fa45 	bl	8002f8c <xTaskResumeAll>
 8003b02:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d10a      	bne.n	8003b20 <ulTaskGenericNotifyTake+0x94>
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d107      	bne.n	8003b20 <ulTaskGenericNotifyTake+0x94>
        {
            taskYIELD_WITHIN_API();
 8003b10:	4b1c      	ldr	r3, [pc, #112]	@ (8003b84 <ulTaskGenericNotifyTake+0xf8>)
 8003b12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8003b20:	f7fe f9f8 	bl	8001f14 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8003b24:	4b16      	ldr	r3, [pc, #88]	@ (8003b80 <ulTaskGenericNotifyTake+0xf4>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3314      	adds	r3, #20
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d014      	beq.n	8003b64 <ulTaskGenericNotifyTake+0xd8>
            {
                if( xClearCountOnExit != pdFALSE )
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <ulTaskGenericNotifyTake+0xc6>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0UL;
 8003b40:	4b0f      	ldr	r3, [pc, #60]	@ (8003b80 <ulTaskGenericNotifyTake+0xf4>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3314      	adds	r3, #20
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	605a      	str	r2, [r3, #4]
 8003b50:	e008      	b.n	8003b64 <ulTaskGenericNotifyTake+0xd8>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 8003b52:	4b0b      	ldr	r3, [pc, #44]	@ (8003b80 <ulTaskGenericNotifyTake+0xf4>)
 8003b54:	6819      	ldr	r1, [r3, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	1e5a      	subs	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3314      	adds	r3, #20
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8003b64:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <ulTaskGenericNotifyTake+0xf4>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3358      	adds	r3, #88	@ 0x58
 8003b6e:	2200      	movs	r2, #0
 8003b70:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003b72:	f7fe fa01 	bl	8001f78 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 8003b76:	697b      	ldr	r3, [r7, #20]
    }
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3720      	adds	r7, #32
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000130 	.word	0x20000130
 8003b84:	e000ed04 	.word	0xe000ed04

08003b88 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b090      	sub	sp, #64	@ 0x40
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10b      	bne.n	8003bb2 <vTaskGenericNotifyGiveFromISR+0x2a>
    __asm volatile
 8003b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003bac:	bf00      	nop
 8003bae:	bf00      	nop
 8003bb0:	e7fd      	b.n	8003bae <vTaskGenericNotifyGiveFromISR+0x26>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00b      	beq.n	8003bd0 <vTaskGenericNotifyGiveFromISR+0x48>
    __asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	623b      	str	r3, [r7, #32]
}
 8003bca:	bf00      	nop
 8003bcc:	bf00      	nop
 8003bce:	e7fd      	b.n	8003bcc <vTaskGenericNotifyGiveFromISR+0x44>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bd0:	f7fe fa84 	bl	80020dc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm volatile
 8003bd8:	f3ef 8211 	mrs	r2, BASEPRI
 8003bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	61fa      	str	r2, [r7, #28]
 8003bee:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8003bf0:	69fb      	ldr	r3, [r7, #28]

        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8003bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003bf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3358      	adds	r3, #88	@ 0x58
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003c02:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4413      	add	r3, r2
 8003c08:	3358      	adds	r3, #88	@ 0x58
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003c0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	3314      	adds	r3, #20
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3314      	adds	r3, #20
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003c28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	f040 80a1 	bne.w	8003d74 <vTaskGenericNotifyGiveFromISR+0x1ec>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <vTaskGenericNotifyGiveFromISR+0xca>
    __asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	617b      	str	r3, [r7, #20]
}
 8003c4c:	bf00      	nop
 8003c4e:	bf00      	nop
 8003c50:	e7fd      	b.n	8003c4e <vTaskGenericNotifyGiveFromISR+0xc6>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003c52:	4b4d      	ldr	r3, [pc, #308]	@ (8003d88 <vTaskGenericNotifyGiveFromISR+0x200>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d160      	bne.n	8003d1c <vTaskGenericNotifyGiveFromISR+0x194>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c66:	68d2      	ldr	r2, [r2, #12]
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c70:	6892      	ldr	r2, [r2, #8]
 8003c72:	605a      	str	r2, [r3, #4]
 8003c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d103      	bne.n	8003c88 <vTaskGenericNotifyGiveFromISR+0x100>
 8003c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c86:	605a      	str	r2, [r3, #4]
 8003c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	615a      	str	r2, [r3, #20]
 8003c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	1e5a      	subs	r2, r3, #1
 8003c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c96:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8003d8c <vTaskGenericNotifyGiveFromISR+0x204>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	4a39      	ldr	r2, [pc, #228]	@ (8003d8c <vTaskGenericNotifyGiveFromISR+0x204>)
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cae:	4938      	ldr	r1, [pc, #224]	@ (8003d90 <vTaskGenericNotifyGiveFromISR+0x208>)
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	3304      	adds	r3, #4
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cc4:	609a      	str	r2, [r3, #8]
 8003cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ccc:	60da      	str	r2, [r3, #12]
 8003cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cd4:	3204      	adds	r2, #4
 8003cd6:	605a      	str	r2, [r3, #4]
 8003cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cda:	1d1a      	adds	r2, r3, #4
 8003cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4a28      	ldr	r2, [pc, #160]	@ (8003d90 <vTaskGenericNotifyGiveFromISR+0x208>)
 8003cee:	441a      	add	r2, r3
 8003cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cf2:	615a      	str	r2, [r3, #20]
 8003cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf8:	4925      	ldr	r1, [pc, #148]	@ (8003d90 <vTaskGenericNotifyGiveFromISR+0x208>)
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d08:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d0a:	1c59      	adds	r1, r3, #1
 8003d0c:	4820      	ldr	r0, [pc, #128]	@ (8003d90 <vTaskGenericNotifyGiveFromISR+0x208>)
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4403      	add	r3, r0
 8003d18:	6019      	str	r1, [r3, #0]
 8003d1a:	e01b      	b.n	8003d54 <vTaskGenericNotifyGiveFromISR+0x1cc>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d94 <vTaskGenericNotifyGiveFromISR+0x20c>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d26:	61da      	str	r2, [r3, #28]
 8003d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d2e:	621a      	str	r2, [r3, #32]
 8003d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d36:	3218      	adds	r2, #24
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d3c:	f103 0218 	add.w	r2, r3, #24
 8003d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d46:	4a13      	ldr	r2, [pc, #76]	@ (8003d94 <vTaskGenericNotifyGiveFromISR+0x20c>)
 8003d48:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d4a:	4b12      	ldr	r3, [pc, #72]	@ (8003d94 <vTaskGenericNotifyGiveFromISR+0x20c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	4a10      	ldr	r2, [pc, #64]	@ (8003d94 <vTaskGenericNotifyGiveFromISR+0x20c>)
 8003d52:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d58:	4b0f      	ldr	r3, [pc, #60]	@ (8003d98 <vTaskGenericNotifyGiveFromISR+0x210>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d908      	bls.n	8003d74 <vTaskGenericNotifyGiveFromISR+0x1ec>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <vTaskGenericNotifyGiveFromISR+0x1e6>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8003d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d9c <vTaskGenericNotifyGiveFromISR+0x214>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d76:	613b      	str	r3, [r7, #16]
    __asm volatile
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f383 8811 	msr	BASEPRI, r3
}
 8003d7e:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 8003d80:	bf00      	nop
 8003d82:	3740      	adds	r7, #64	@ 0x40
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	2000026c 	.word	0x2000026c
 8003d8c:	2000024c 	.word	0x2000024c
 8003d90:	20000134 	.word	0x20000134
 8003d94:	20000218 	.word	0x20000218
 8003d98:	20000130 	.word	0x20000130
 8003d9c:	20000258 	.word	0x20000258

08003da0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003daa:	4b22      	ldr	r3, [pc, #136]	@ (8003e34 <prvAddCurrentTaskToDelayedList+0x94>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	617b      	str	r3, [r7, #20]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003db0:	4b21      	ldr	r3, [pc, #132]	@ (8003e38 <prvAddCurrentTaskToDelayedList+0x98>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	613b      	str	r3, [r7, #16]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003db6:	4b21      	ldr	r3, [pc, #132]	@ (8003e3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dbc:	4b20      	ldr	r3, [pc, #128]	@ (8003e40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fd fcf1 	bl	80017aa <uxListRemove>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10b      	bne.n	8003de6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003dce:	4b1c      	ldr	r3, [pc, #112]	@ (8003e40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43da      	mvns	r2, r3
 8003ddc:	4b19      	ldr	r3, [pc, #100]	@ (8003e44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4013      	ands	r3, r2
 8003de2:	4a18      	ldr	r2, [pc, #96]	@ (8003e44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003de4:	6013      	str	r3, [r2, #0]
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4413      	add	r3, r2
 8003dec:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003dee:	4b14      	ldr	r3, [pc, #80]	@ (8003e40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d207      	bcs.n	8003e0e <prvAddCurrentTaskToDelayedList+0x6e>
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003dfe:	4b10      	ldr	r3, [pc, #64]	@ (8003e40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3304      	adds	r3, #4
 8003e04:	4619      	mov	r1, r3
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f7fd fc96 	bl	8001738 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e0c:	e00e      	b.n	8003e2c <prvAddCurrentTaskToDelayedList+0x8c>
            vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4619      	mov	r1, r3
 8003e16:	6938      	ldr	r0, [r7, #16]
 8003e18:	f7fd fc8e 	bl	8001738 <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e48 <prvAddCurrentTaskToDelayedList+0xa8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d202      	bcs.n	8003e2c <prvAddCurrentTaskToDelayedList+0x8c>
                xNextTaskUnblockTime = xTimeToWake;
 8003e26:	4a08      	ldr	r2, [pc, #32]	@ (8003e48 <prvAddCurrentTaskToDelayedList+0xa8>)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	6013      	str	r3, [r2, #0]
}
 8003e2c:	bf00      	nop
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	20000248 	.word	0x20000248
 8003e38:	20000210 	.word	0x20000210
 8003e3c:	20000214 	.word	0x20000214
 8003e40:	20000130 	.word	0x20000130
 8003e44:	2000024c 	.word	0x2000024c
 8003e48:	20000264 	.word	0x20000264

08003e4c <LL_GPIO_SetPinMode>:
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b08b      	sub	sp, #44	@ 0x2c
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	fa93 f3a3 	rbit	r3, r3
 8003e66:	613b      	str	r3, [r7, #16]
  return result;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003e72:	2320      	movs	r3, #32
 8003e74:	e003      	b.n	8003e7e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	fab3 f383 	clz	r3, r3
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	2103      	movs	r1, #3
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	401a      	ands	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	fa93 f3a3 	rbit	r3, r3
 8003e94:	61fb      	str	r3, [r7, #28]
  return result;
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003ea0:	2320      	movs	r3, #32
 8003ea2:	e003      	b.n	8003eac <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	601a      	str	r2, [r3, #0]
}
 8003eba:	bf00      	nop
 8003ebc:	372c      	adds	r7, #44	@ 0x2c
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <LL_GPIO_SetPinOutputType>:
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b085      	sub	sp, #20
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	401a      	ands	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	fb01 f303 	mul.w	r3, r1, r3
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	605a      	str	r2, [r3, #4]
}
 8003eea:	bf00      	nop
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <LL_GPIO_SetPinSpeed>:
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b08b      	sub	sp, #44	@ 0x2c
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	fa93 f3a3 	rbit	r3, r3
 8003f10:	613b      	str	r3, [r7, #16]
  return result;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003f1c:	2320      	movs	r3, #32
 8003f1e:	e003      	b.n	8003f28 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	fab3 f383 	clz	r3, r3
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	2103      	movs	r1, #3
 8003f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	401a      	ands	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	fa93 f3a3 	rbit	r3, r3
 8003f3e:	61fb      	str	r3, [r7, #28]
  return result;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003f4a:	2320      	movs	r3, #32
 8003f4c:	e003      	b.n	8003f56 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	fab3 f383 	clz	r3, r3
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	609a      	str	r2, [r3, #8]
}
 8003f64:	bf00      	nop
 8003f66:	372c      	adds	r7, #44	@ 0x2c
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <LL_GPIO_SetPinPull>:
{
 8003f70:	b480      	push	{r7}
 8003f72:	b08b      	sub	sp, #44	@ 0x2c
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	fa93 f3a3 	rbit	r3, r3
 8003f8a:	613b      	str	r3, [r7, #16]
  return result;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003f96:	2320      	movs	r3, #32
 8003f98:	e003      	b.n	8003fa2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	fab3 f383 	clz	r3, r3
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	2103      	movs	r1, #3
 8003fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003faa:	43db      	mvns	r3, r3
 8003fac:	401a      	ands	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	fa93 f3a3 	rbit	r3, r3
 8003fb8:	61fb      	str	r3, [r7, #28]
  return result;
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8003fc4:	2320      	movs	r3, #32
 8003fc6:	e003      	b.n	8003fd0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	fab3 f383 	clz	r3, r3
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	60da      	str	r2, [r3, #12]
}
 8003fde:	bf00      	nop
 8003fe0:	372c      	adds	r7, #44	@ 0x2c
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <LL_GPIO_SetAFPin_0_7>:
{
 8003fea:	b480      	push	{r7}
 8003fec:	b08b      	sub	sp, #44	@ 0x2c
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a1a      	ldr	r2, [r3, #32]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	fa93 f3a3 	rbit	r3, r3
 8004004:	613b      	str	r3, [r7, #16]
  return result;
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004010:	2320      	movs	r3, #32
 8004012:	e003      	b.n	800401c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	fab3 f383 	clz	r3, r3
 800401a:	b2db      	uxtb	r3, r3
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	210f      	movs	r1, #15
 8004020:	fa01 f303 	lsl.w	r3, r1, r3
 8004024:	43db      	mvns	r3, r3
 8004026:	401a      	ands	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	fa93 f3a3 	rbit	r3, r3
 8004032:	61fb      	str	r3, [r7, #28]
  return result;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800403e:	2320      	movs	r3, #32
 8004040:	e003      	b.n	800404a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004044:	fab3 f383 	clz	r3, r3
 8004048:	b2db      	uxtb	r3, r3
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	fa01 f303 	lsl.w	r3, r1, r3
 8004052:	431a      	orrs	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	621a      	str	r2, [r3, #32]
}
 8004058:	bf00      	nop
 800405a:	372c      	adds	r7, #44	@ 0x2c
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <LL_GPIO_SetAFPin_8_15>:
{
 8004064:	b480      	push	{r7}
 8004066:	b08b      	sub	sp, #44	@ 0x2c
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	fa93 f3a3 	rbit	r3, r3
 8004080:	613b      	str	r3, [r7, #16]
  return result;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800408c:	2320      	movs	r3, #32
 800408e:	e003      	b.n	8004098 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	fab3 f383 	clz	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	210f      	movs	r1, #15
 800409c:	fa01 f303 	lsl.w	r3, r1, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	401a      	ands	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	0a1b      	lsrs	r3, r3, #8
 80040a8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	fa93 f3a3 	rbit	r3, r3
 80040b0:	61fb      	str	r3, [r7, #28]
  return result;
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80040bc:	2320      	movs	r3, #32
 80040be:	e003      	b.n	80040c8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80040c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c2:	fab3 f383 	clz	r3, r3
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	fa01 f303 	lsl.w	r3, r1, r3
 80040d0:	431a      	orrs	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80040d6:	bf00      	nop
 80040d8:	372c      	adds	r7, #44	@ 0x2c
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b08a      	sub	sp, #40	@ 0x28
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	617b      	str	r3, [r7, #20]
  return result;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <LL_GPIO_Init+0x2e>
    return 32U;
 800410c:	2320      	movs	r3, #32
 800410e:	e003      	b.n	8004118 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800411a:	e057      	b.n	80041cc <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	2101      	movs	r1, #1
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	fa01 f303 	lsl.w	r3, r1, r3
 8004128:	4013      	ands	r3, r2
 800412a:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d049      	beq.n	80041c6 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d003      	beq.n	8004142 <LL_GPIO_Init+0x60>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d10d      	bne.n	800415e <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	461a      	mov	r2, r3
 8004148:	6a39      	ldr	r1, [r7, #32]
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff fed3 	bl	8003ef6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	461a      	mov	r2, r3
 8004156:	6a39      	ldr	r1, [r7, #32]
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff feb4 	bl	8003ec6 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	461a      	mov	r2, r3
 8004164:	6a39      	ldr	r1, [r7, #32]
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff ff02 	bl	8003f70 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d121      	bne.n	80041b8 <LL_GPIO_Init+0xd6>
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	fa93 f3a3 	rbit	r3, r3
 800417e:	60bb      	str	r3, [r7, #8]
  return result;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <LL_GPIO_Init+0xac>
    return 32U;
 800418a:	2320      	movs	r3, #32
 800418c:	e003      	b.n	8004196 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	fab3 f383 	clz	r3, r3
 8004194:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004196:	2b07      	cmp	r3, #7
 8004198:	d807      	bhi.n	80041aa <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	461a      	mov	r2, r3
 80041a0:	6a39      	ldr	r1, [r7, #32]
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff ff21 	bl	8003fea <LL_GPIO_SetAFPin_0_7>
 80041a8:	e006      	b.n	80041b8 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	461a      	mov	r2, r3
 80041b0:	6a39      	ldr	r1, [r7, #32]
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff ff56 	bl	8004064 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	461a      	mov	r2, r3
 80041be:	6a39      	ldr	r1, [r7, #32]
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff fe43 	bl	8003e4c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	3301      	adds	r3, #1
 80041ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	fa22 f303 	lsr.w	r3, r2, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1a0      	bne.n	800411c <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3728      	adds	r7, #40	@ 0x28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <LL_RCC_GetSysClkSource>:
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80041e8:	4b04      	ldr	r3, [pc, #16]	@ (80041fc <LL_RCC_GetSysClkSource+0x18>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 030c 	and.w	r3, r3, #12
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40023800 	.word	0x40023800

08004200 <LL_RCC_GetAHBPrescaler>:
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004204:	4b04      	ldr	r3, [pc, #16]	@ (8004218 <LL_RCC_GetAHBPrescaler+0x18>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800420c:	4618      	mov	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40023800 	.word	0x40023800

0800421c <LL_RCC_GetAPB1Prescaler>:
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004220:	4b04      	ldr	r3, [pc, #16]	@ (8004234 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8004228:	4618      	mov	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800

08004238 <LL_RCC_GetAPB2Prescaler>:
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800423c:	4b04      	ldr	r3, [pc, #16]	@ (8004250 <LL_RCC_GetAPB2Prescaler+0x18>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004244:	4618      	mov	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40023800 	.word	0x40023800

08004254 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004258:	4b04      	ldr	r3, [pc, #16]	@ (800426c <LL_RCC_PLL_GetMainSource+0x18>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8004260:	4618      	mov	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800

08004270 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004274:	4b04      	ldr	r3, [pc, #16]	@ (8004288 <LL_RCC_PLL_GetN+0x18>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	099b      	lsrs	r3, r3, #6
 800427a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800427e:	4618      	mov	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40023800 	.word	0x40023800

0800428c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004290:	4b04      	ldr	r3, [pc, #16]	@ (80042a4 <LL_RCC_PLL_GetP+0x18>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004298:	4618      	mov	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800

080042a8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80042ac:	4b04      	ldr	r3, [pc, #16]	@ (80042c0 <LL_RCC_PLL_GetDivider+0x18>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40023800 	.word	0x40023800

080042c4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80042cc:	f000 f820 	bl	8004310 <RCC_GetSystemClockFreq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 f840 	bl	8004360 <RCC_GetHCLKClockFreq>
 80042e0:	4602      	mov	r2, r0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 f84e 	bl	800438c <RCC_GetPCLK1ClockFreq>
 80042f0:	4602      	mov	r2, r0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 f85a 	bl	80043b4 <RCC_GetPCLK2ClockFreq>
 8004300:	4602      	mov	r2, r0
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60da      	str	r2, [r3, #12]
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800431a:	f7ff ff63 	bl	80041e4 <LL_RCC_GetSysClkSource>
 800431e:	4603      	mov	r3, r0
 8004320:	2b08      	cmp	r3, #8
 8004322:	d00c      	beq.n	800433e <RCC_GetSystemClockFreq+0x2e>
 8004324:	2b08      	cmp	r3, #8
 8004326:	d80f      	bhi.n	8004348 <RCC_GetSystemClockFreq+0x38>
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <RCC_GetSystemClockFreq+0x22>
 800432c:	2b04      	cmp	r3, #4
 800432e:	d003      	beq.n	8004338 <RCC_GetSystemClockFreq+0x28>
 8004330:	e00a      	b.n	8004348 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004332:	4b09      	ldr	r3, [pc, #36]	@ (8004358 <RCC_GetSystemClockFreq+0x48>)
 8004334:	607b      	str	r3, [r7, #4]
      break;
 8004336:	e00a      	b.n	800434e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004338:	4b08      	ldr	r3, [pc, #32]	@ (800435c <RCC_GetSystemClockFreq+0x4c>)
 800433a:	607b      	str	r3, [r7, #4]
      break;
 800433c:	e007      	b.n	800434e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800433e:	2008      	movs	r0, #8
 8004340:	f000 f84c 	bl	80043dc <RCC_PLL_GetFreqDomain_SYS>
 8004344:	6078      	str	r0, [r7, #4]
      break;
 8004346:	e002      	b.n	800434e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004348:	4b03      	ldr	r3, [pc, #12]	@ (8004358 <RCC_GetSystemClockFreq+0x48>)
 800434a:	607b      	str	r3, [r7, #4]
      break;
 800434c:	bf00      	nop
  }

  return frequency;
 800434e:	687b      	ldr	r3, [r7, #4]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	00f42400 	.word	0x00f42400
 800435c:	017d7840 	.word	0x017d7840

08004360 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004368:	f7ff ff4a 	bl	8004200 <LL_RCC_GetAHBPrescaler>
 800436c:	4603      	mov	r3, r0
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	4a04      	ldr	r2, [pc, #16]	@ (8004388 <RCC_GetHCLKClockFreq+0x28>)
 8004376:	5cd3      	ldrb	r3, [r2, r3]
 8004378:	461a      	mov	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	40d3      	lsrs	r3, r2
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	08004f10 	.word	0x08004f10

0800438c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004394:	f7ff ff42 	bl	800421c <LL_RCC_GetAPB1Prescaler>
 8004398:	4603      	mov	r3, r0
 800439a:	0a9b      	lsrs	r3, r3, #10
 800439c:	4a04      	ldr	r2, [pc, #16]	@ (80043b0 <RCC_GetPCLK1ClockFreq+0x24>)
 800439e:	5cd3      	ldrb	r3, [r2, r3]
 80043a0:	461a      	mov	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	40d3      	lsrs	r3, r2
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	08004f20 	.word	0x08004f20

080043b4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80043bc:	f7ff ff3c 	bl	8004238 <LL_RCC_GetAPB2Prescaler>
 80043c0:	4603      	mov	r3, r0
 80043c2:	0b5b      	lsrs	r3, r3, #13
 80043c4:	4a04      	ldr	r2, [pc, #16]	@ (80043d8 <RCC_GetPCLK2ClockFreq+0x24>)
 80043c6:	5cd3      	ldrb	r3, [r2, r3]
 80043c8:	461a      	mov	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	40d3      	lsrs	r3, r2
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	08004f20 	.word	0x08004f20

080043dc <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80043dc:	b590      	push	{r4, r7, lr}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	2300      	movs	r3, #0
 80043ee:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80043f0:	f7ff ff30 	bl	8004254 <LL_RCC_PLL_GetMainSource>
 80043f4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d004      	beq.n	8004406 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004402:	d003      	beq.n	800440c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004404:	e005      	b.n	8004412 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004406:	4b12      	ldr	r3, [pc, #72]	@ (8004450 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004408:	617b      	str	r3, [r7, #20]
      break;
 800440a:	e005      	b.n	8004418 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800440c:	4b11      	ldr	r3, [pc, #68]	@ (8004454 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800440e:	617b      	str	r3, [r7, #20]
      break;
 8004410:	e002      	b.n	8004418 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004412:	4b0f      	ldr	r3, [pc, #60]	@ (8004450 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004414:	617b      	str	r3, [r7, #20]
      break;
 8004416:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b08      	cmp	r3, #8
 800441c:	d113      	bne.n	8004446 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800441e:	f7ff ff43 	bl	80042a8 <LL_RCC_PLL_GetDivider>
 8004422:	4602      	mov	r2, r0
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	fbb3 f4f2 	udiv	r4, r3, r2
 800442a:	f7ff ff21 	bl	8004270 <LL_RCC_PLL_GetN>
 800442e:	4603      	mov	r3, r0
 8004430:	fb03 f404 	mul.w	r4, r3, r4
 8004434:	f7ff ff2a 	bl	800428c <LL_RCC_PLL_GetP>
 8004438:	4603      	mov	r3, r0
 800443a:	0c1b      	lsrs	r3, r3, #16
 800443c:	3301      	adds	r3, #1
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	fbb4 f3f3 	udiv	r3, r4, r3
 8004444:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004446:	693b      	ldr	r3, [r7, #16]
}
 8004448:	4618      	mov	r0, r3
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	bd90      	pop	{r4, r7, pc}
 8004450:	00f42400 	.word	0x00f42400
 8004454:	017d7840 	.word	0x017d7840

08004458 <LL_TIM_SetPrescaler>:
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <LL_TIM_SetAutoReload>:
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <LL_TIM_SetRepetitionCounter>:
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f043 0201 	orr.w	r2, r3, #1
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	615a      	str	r2, [r3, #20]
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a31      	ldr	r2, [pc, #196]	@ (80045a4 <LL_TIM_Init+0xd8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00f      	beq.n	8004504 <LL_TIM_Init+0x38>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ea:	d00b      	beq.n	8004504 <LL_TIM_Init+0x38>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a2e      	ldr	r2, [pc, #184]	@ (80045a8 <LL_TIM_Init+0xdc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d007      	beq.n	8004504 <LL_TIM_Init+0x38>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a2d      	ldr	r2, [pc, #180]	@ (80045ac <LL_TIM_Init+0xe0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <LL_TIM_Init+0x38>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a2c      	ldr	r2, [pc, #176]	@ (80045b0 <LL_TIM_Init+0xe4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d106      	bne.n	8004512 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a23      	ldr	r2, [pc, #140]	@ (80045a4 <LL_TIM_Init+0xd8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d01b      	beq.n	8004552 <LL_TIM_Init+0x86>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004520:	d017      	beq.n	8004552 <LL_TIM_Init+0x86>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a20      	ldr	r2, [pc, #128]	@ (80045a8 <LL_TIM_Init+0xdc>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <LL_TIM_Init+0x86>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a1f      	ldr	r2, [pc, #124]	@ (80045ac <LL_TIM_Init+0xe0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00f      	beq.n	8004552 <LL_TIM_Init+0x86>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a1e      	ldr	r2, [pc, #120]	@ (80045b0 <LL_TIM_Init+0xe4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00b      	beq.n	8004552 <LL_TIM_Init+0x86>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a1d      	ldr	r2, [pc, #116]	@ (80045b4 <LL_TIM_Init+0xe8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <LL_TIM_Init+0x86>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a1c      	ldr	r2, [pc, #112]	@ (80045b8 <LL_TIM_Init+0xec>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d003      	beq.n	8004552 <LL_TIM_Init+0x86>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a1b      	ldr	r2, [pc, #108]	@ (80045bc <LL_TIM_Init+0xf0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d106      	bne.n	8004560 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	4313      	orrs	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	4619      	mov	r1, r3
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff ff81 	bl	8004474 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	4619      	mov	r1, r3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff ff6d 	bl	8004458 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a08      	ldr	r2, [pc, #32]	@ (80045a4 <LL_TIM_Init+0xd8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d105      	bne.n	8004592 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	4619      	mov	r1, r3
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff ff7f 	bl	8004490 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff ff8a 	bl	80044ac <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40010000 	.word	0x40010000
 80045a8:	40000400 	.word	0x40000400
 80045ac:	40000800 	.word	0x40000800
 80045b0:	40000c00 	.word	0x40000c00
 80045b4:	40014000 	.word	0x40014000
 80045b8:	40014400 	.word	0x40014400
 80045bc:	40014800 	.word	0x40014800

080045c0 <LL_USART_IsEnabled>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045d4:	bf0c      	ite	eq
 80045d6:	2301      	moveq	r3, #1
 80045d8:	2300      	movne	r3, #0
 80045da:	b2db      	uxtb	r3, r3
}
 80045dc:	4618      	mov	r0, r3
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <LL_USART_SetStopBitsLength>:
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	611a      	str	r2, [r3, #16]
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <LL_USART_SetHWFlowCtrl>:
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	615a      	str	r2, [r3, #20]
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <LL_USART_SetBaudRate>:
{
 8004634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004638:	b0c0      	sub	sp, #256	@ 0x100
 800463a:	af00      	add	r7, sp, #0
 800463c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004640:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8004644:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8004648:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800464c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004650:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004654:	f040 810c 	bne.w	8004870 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004658:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800465c:	2200      	movs	r2, #0
 800465e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004662:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004666:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800466a:	4622      	mov	r2, r4
 800466c:	462b      	mov	r3, r5
 800466e:	1891      	adds	r1, r2, r2
 8004670:	6639      	str	r1, [r7, #96]	@ 0x60
 8004672:	415b      	adcs	r3, r3
 8004674:	667b      	str	r3, [r7, #100]	@ 0x64
 8004676:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800467a:	4621      	mov	r1, r4
 800467c:	eb12 0801 	adds.w	r8, r2, r1
 8004680:	4629      	mov	r1, r5
 8004682:	eb43 0901 	adc.w	r9, r3, r1
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800469a:	4690      	mov	r8, r2
 800469c:	4699      	mov	r9, r3
 800469e:	4623      	mov	r3, r4
 80046a0:	eb18 0303 	adds.w	r3, r8, r3
 80046a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046a8:	462b      	mov	r3, r5
 80046aa:	eb49 0303 	adc.w	r3, r9, r3
 80046ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80046b6:	2200      	movs	r2, #0
 80046b8:	469a      	mov	sl, r3
 80046ba:	4693      	mov	fp, r2
 80046bc:	eb1a 030a 	adds.w	r3, sl, sl
 80046c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046c2:	eb4b 030b 	adc.w	r3, fp, fp
 80046c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046d0:	f7fb fd86 	bl	80001e0 <__aeabi_uldivmod>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4b64      	ldr	r3, [pc, #400]	@ (800486c <LL_USART_SetBaudRate+0x238>)
 80046da:	fba3 2302 	umull	r2, r3, r3, r2
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	b29c      	uxth	r4, r3
 80046e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80046ea:	2200      	movs	r2, #0
 80046ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046f0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046f4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80046f8:	4642      	mov	r2, r8
 80046fa:	464b      	mov	r3, r9
 80046fc:	1891      	adds	r1, r2, r2
 80046fe:	6539      	str	r1, [r7, #80]	@ 0x50
 8004700:	415b      	adcs	r3, r3
 8004702:	657b      	str	r3, [r7, #84]	@ 0x54
 8004704:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004708:	4641      	mov	r1, r8
 800470a:	1851      	adds	r1, r2, r1
 800470c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800470e:	4649      	mov	r1, r9
 8004710:	414b      	adcs	r3, r1
 8004712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8004720:	4659      	mov	r1, fp
 8004722:	00cb      	lsls	r3, r1, #3
 8004724:	4651      	mov	r1, sl
 8004726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800472a:	4651      	mov	r1, sl
 800472c:	00ca      	lsls	r2, r1, #3
 800472e:	4610      	mov	r0, r2
 8004730:	4619      	mov	r1, r3
 8004732:	4603      	mov	r3, r0
 8004734:	4642      	mov	r2, r8
 8004736:	189b      	adds	r3, r3, r2
 8004738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800473c:	464b      	mov	r3, r9
 800473e:	460a      	mov	r2, r1
 8004740:	eb42 0303 	adc.w	r3, r2, r3
 8004744:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004748:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800474c:	2200      	movs	r2, #0
 800474e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004752:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8004756:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800475a:	460b      	mov	r3, r1
 800475c:	18db      	adds	r3, r3, r3
 800475e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004760:	4613      	mov	r3, r2
 8004762:	eb42 0303 	adc.w	r3, r2, r3
 8004766:	647b      	str	r3, [r7, #68]	@ 0x44
 8004768:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800476c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8004770:	f7fb fd36 	bl	80001e0 <__aeabi_uldivmod>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4611      	mov	r1, r2
 800477a:	4b3c      	ldr	r3, [pc, #240]	@ (800486c <LL_USART_SetBaudRate+0x238>)
 800477c:	fba3 2301 	umull	r2, r3, r3, r1
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	2264      	movs	r2, #100	@ 0x64
 8004784:	fb02 f303 	mul.w	r3, r2, r3
 8004788:	1acb      	subs	r3, r1, r3
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004790:	4b36      	ldr	r3, [pc, #216]	@ (800486c <LL_USART_SetBaudRate+0x238>)
 8004792:	fba3 2302 	umull	r2, r3, r3, r2
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	b29b      	uxth	r3, r3
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	b29b      	uxth	r3, r3
 800479e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	4423      	add	r3, r4
 80047a6:	b29c      	uxth	r4, r3
 80047a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047ac:	2200      	movs	r2, #0
 80047ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047b2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80047b6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80047ba:	4642      	mov	r2, r8
 80047bc:	464b      	mov	r3, r9
 80047be:	1891      	adds	r1, r2, r2
 80047c0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047c2:	415b      	adcs	r3, r3
 80047c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047ca:	4641      	mov	r1, r8
 80047cc:	1851      	adds	r1, r2, r1
 80047ce:	6339      	str	r1, [r7, #48]	@ 0x30
 80047d0:	4649      	mov	r1, r9
 80047d2:	414b      	adcs	r3, r1
 80047d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047e2:	4659      	mov	r1, fp
 80047e4:	00cb      	lsls	r3, r1, #3
 80047e6:	4651      	mov	r1, sl
 80047e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ec:	4651      	mov	r1, sl
 80047ee:	00ca      	lsls	r2, r1, #3
 80047f0:	4610      	mov	r0, r2
 80047f2:	4619      	mov	r1, r3
 80047f4:	4603      	mov	r3, r0
 80047f6:	4642      	mov	r2, r8
 80047f8:	189b      	adds	r3, r3, r2
 80047fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047fe:	464b      	mov	r3, r9
 8004800:	460a      	mov	r2, r1
 8004802:	eb42 0303 	adc.w	r3, r2, r3
 8004806:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800480a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800480e:	2200      	movs	r2, #0
 8004810:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004814:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004818:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800481c:	460b      	mov	r3, r1
 800481e:	18db      	adds	r3, r3, r3
 8004820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004822:	4613      	mov	r3, r2
 8004824:	eb42 0303 	adc.w	r3, r2, r3
 8004828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800482a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800482e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8004832:	f7fb fcd5 	bl	80001e0 <__aeabi_uldivmod>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4b0c      	ldr	r3, [pc, #48]	@ (800486c <LL_USART_SetBaudRate+0x238>)
 800483c:	fba3 1302 	umull	r1, r3, r3, r2
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	2164      	movs	r1, #100	@ 0x64
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	3332      	adds	r3, #50	@ 0x32
 800484e:	4a07      	ldr	r2, [pc, #28]	@ (800486c <LL_USART_SetBaudRate+0x238>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	b29b      	uxth	r3, r3
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	b29b      	uxth	r3, r3
 800485e:	4423      	add	r3, r4
 8004860:	b29b      	uxth	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004868:	609a      	str	r2, [r3, #8]
}
 800486a:	e108      	b.n	8004a7e <LL_USART_SetBaudRate+0x44a>
 800486c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004870:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004874:	2200      	movs	r2, #0
 8004876:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800487a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800487e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8004882:	4642      	mov	r2, r8
 8004884:	464b      	mov	r3, r9
 8004886:	1891      	adds	r1, r2, r2
 8004888:	6239      	str	r1, [r7, #32]
 800488a:	415b      	adcs	r3, r3
 800488c:	627b      	str	r3, [r7, #36]	@ 0x24
 800488e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004892:	4641      	mov	r1, r8
 8004894:	1854      	adds	r4, r2, r1
 8004896:	4649      	mov	r1, r9
 8004898:	eb43 0501 	adc.w	r5, r3, r1
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	00eb      	lsls	r3, r5, #3
 80048a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048aa:	00e2      	lsls	r2, r4, #3
 80048ac:	4614      	mov	r4, r2
 80048ae:	461d      	mov	r5, r3
 80048b0:	4643      	mov	r3, r8
 80048b2:	18e3      	adds	r3, r4, r3
 80048b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048b8:	464b      	mov	r3, r9
 80048ba:	eb45 0303 	adc.w	r3, r5, r3
 80048be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80048c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048cc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80048dc:	4629      	mov	r1, r5
 80048de:	008b      	lsls	r3, r1, #2
 80048e0:	4621      	mov	r1, r4
 80048e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e6:	4621      	mov	r1, r4
 80048e8:	008a      	lsls	r2, r1, #2
 80048ea:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80048ee:	f7fb fc77 	bl	80001e0 <__aeabi_uldivmod>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4b65      	ldr	r3, [pc, #404]	@ (8004a8c <LL_USART_SetBaudRate+0x458>)
 80048f8:	fba3 2302 	umull	r2, r3, r3, r2
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	b29b      	uxth	r3, r3
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	b29c      	uxth	r4, r3
 8004904:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004908:	2200      	movs	r2, #0
 800490a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800490e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004912:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8004916:	4642      	mov	r2, r8
 8004918:	464b      	mov	r3, r9
 800491a:	1891      	adds	r1, r2, r2
 800491c:	61b9      	str	r1, [r7, #24]
 800491e:	415b      	adcs	r3, r3
 8004920:	61fb      	str	r3, [r7, #28]
 8004922:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004926:	4641      	mov	r1, r8
 8004928:	1851      	adds	r1, r2, r1
 800492a:	6139      	str	r1, [r7, #16]
 800492c:	4649      	mov	r1, r9
 800492e:	414b      	adcs	r3, r1
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800493e:	4659      	mov	r1, fp
 8004940:	00cb      	lsls	r3, r1, #3
 8004942:	4651      	mov	r1, sl
 8004944:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004948:	4651      	mov	r1, sl
 800494a:	00ca      	lsls	r2, r1, #3
 800494c:	4610      	mov	r0, r2
 800494e:	4619      	mov	r1, r3
 8004950:	4603      	mov	r3, r0
 8004952:	4642      	mov	r2, r8
 8004954:	189b      	adds	r3, r3, r2
 8004956:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800495a:	464b      	mov	r3, r9
 800495c:	460a      	mov	r2, r1
 800495e:	eb42 0303 	adc.w	r3, r2, r3
 8004962:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004966:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800496a:	2200      	movs	r2, #0
 800496c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004970:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8004980:	4649      	mov	r1, r9
 8004982:	008b      	lsls	r3, r1, #2
 8004984:	4641      	mov	r1, r8
 8004986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800498a:	4641      	mov	r1, r8
 800498c:	008a      	lsls	r2, r1, #2
 800498e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8004992:	f7fb fc25 	bl	80001e0 <__aeabi_uldivmod>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4611      	mov	r1, r2
 800499c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a8c <LL_USART_SetBaudRate+0x458>)
 800499e:	fba3 2301 	umull	r2, r3, r3, r1
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	2264      	movs	r2, #100	@ 0x64
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	1acb      	subs	r3, r1, r3
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	3332      	adds	r3, #50	@ 0x32
 80049b0:	4a36      	ldr	r2, [pc, #216]	@ (8004a8c <LL_USART_SetBaudRate+0x458>)
 80049b2:	fba2 2303 	umull	r2, r3, r2, r3
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049be:	b29b      	uxth	r3, r3
 80049c0:	4423      	add	r3, r4
 80049c2:	b29c      	uxth	r4, r3
 80049c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049c8:	2200      	movs	r2, #0
 80049ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049cc:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80049ce:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80049d2:	4642      	mov	r2, r8
 80049d4:	464b      	mov	r3, r9
 80049d6:	1891      	adds	r1, r2, r2
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	415b      	adcs	r3, r3
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049e2:	4641      	mov	r1, r8
 80049e4:	1851      	adds	r1, r2, r1
 80049e6:	6039      	str	r1, [r7, #0]
 80049e8:	4649      	mov	r1, r9
 80049ea:	414b      	adcs	r3, r1
 80049ec:	607b      	str	r3, [r7, #4]
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049fa:	4659      	mov	r1, fp
 80049fc:	00cb      	lsls	r3, r1, #3
 80049fe:	4651      	mov	r1, sl
 8004a00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a04:	4651      	mov	r1, sl
 8004a06:	00ca      	lsls	r2, r1, #3
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	4642      	mov	r2, r8
 8004a10:	189b      	adds	r3, r3, r2
 8004a12:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a14:	464b      	mov	r3, r9
 8004a16:	460a      	mov	r2, r1
 8004a18:	eb42 0303 	adc.w	r3, r2, r3
 8004a1c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004a22:	2200      	movs	r2, #0
 8004a24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8004a34:	4649      	mov	r1, r9
 8004a36:	008b      	lsls	r3, r1, #2
 8004a38:	4641      	mov	r1, r8
 8004a3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a3e:	4641      	mov	r1, r8
 8004a40:	008a      	lsls	r2, r1, #2
 8004a42:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004a46:	f7fb fbcb 	bl	80001e0 <__aeabi_uldivmod>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a8c <LL_USART_SetBaudRate+0x458>)
 8004a50:	fba3 1302 	umull	r1, r3, r3, r2
 8004a54:	095b      	lsrs	r3, r3, #5
 8004a56:	2164      	movs	r1, #100	@ 0x64
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	3332      	adds	r3, #50	@ 0x32
 8004a62:	4a0a      	ldr	r2, [pc, #40]	@ (8004a8c <LL_USART_SetBaudRate+0x458>)
 8004a64:	fba2 2303 	umull	r2, r3, r2, r3
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f003 030f 	and.w	r3, r3, #15
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	4423      	add	r3, r4
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a7c:	609a      	str	r2, [r3, #8]
}
 8004a7e:	bf00      	nop
 8004a80:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a84:	46bd      	mov	sp, r7
 8004a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a8a:	bf00      	nop
 8004a8c:	51eb851f 	.word	0x51eb851f

08004a90 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7ff fd8c 	bl	80045c0 <LL_USART_IsEnabled>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d149      	bne.n	8004b42 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004ab6:	f023 030c 	bic.w	r3, r3, #12
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	6851      	ldr	r1, [r2, #4]
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	68d2      	ldr	r2, [r2, #12]
 8004ac2:	4311      	orrs	r1, r2
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	6912      	ldr	r2, [r2, #16]
 8004ac8:	4311      	orrs	r1, r2
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	6992      	ldr	r2, [r2, #24]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	4619      	mov	r1, r3
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff fd83 	bl	80045e8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7ff fd90 	bl	800460e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004aee:	f107 0308 	add.w	r3, r7, #8
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fbe6 	bl	80042c4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a14      	ldr	r2, [pc, #80]	@ (8004b4c <LL_USART_Init+0xbc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d102      	bne.n	8004b06 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	e00c      	b.n	8004b20 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a11      	ldr	r2, [pc, #68]	@ (8004b50 <LL_USART_Init+0xc0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d102      	bne.n	8004b14 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	61bb      	str	r3, [r7, #24]
 8004b12:	e005      	b.n	8004b20 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a0f      	ldr	r2, [pc, #60]	@ (8004b54 <LL_USART_Init+0xc4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d101      	bne.n	8004b20 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00d      	beq.n	8004b42 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004b3a:	69b9      	ldr	r1, [r7, #24]
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff fd79 	bl	8004634 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004b42:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40011000 	.word	0x40011000
 8004b50:	40004400 	.word	0x40004400
 8004b54:	40011400 	.word	0x40011400

08004b58 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6a:	4a07      	ldr	r2, [pc, #28]	@ (8004b88 <LL_InitTick+0x30>)
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004b70:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <LL_InitTick+0x30>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b76:	4b04      	ldr	r3, [pc, #16]	@ (8004b88 <LL_InitTick+0x30>)
 8004b78:	2205      	movs	r2, #5
 8004b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000e010 	.word	0xe000e010

08004b8c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004b94:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff ffdd 	bl	8004b58 <LL_InitTick>
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004bb0:	4a04      	ldr	r2, [pc, #16]	@ (8004bc4 <LL_SetSystemCoreClock+0x1c>)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6013      	str	r3, [r2, #0]
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000004 	.word	0x20000004

08004bc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004bc8:	480d      	ldr	r0, [pc, #52]	@ (8004c00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004bca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004bcc:	f7fd fed6 	bl	800297c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bd0:	480c      	ldr	r0, [pc, #48]	@ (8004c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8004bd2:	490d      	ldr	r1, [pc, #52]	@ (8004c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8004c0c <LoopForever+0xe>)
  movs r3, #0
 8004bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bd8:	e002      	b.n	8004be0 <LoopCopyDataInit>

08004bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bde:	3304      	adds	r3, #4

08004be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004be4:	d3f9      	bcc.n	8004bda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004be6:	4a0a      	ldr	r2, [pc, #40]	@ (8004c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004be8:	4c0a      	ldr	r4, [pc, #40]	@ (8004c14 <LoopForever+0x16>)
  movs r3, #0
 8004bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bec:	e001      	b.n	8004bf2 <LoopFillZerobss>

08004bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bf0:	3204      	adds	r2, #4

08004bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bf4:	d3fb      	bcc.n	8004bee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004bf6:	f000 f8ed 	bl	8004dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004bfa:	f7fc ff71 	bl	8001ae0 <main>

08004bfe <LoopForever>:

LoopForever:
  b LoopForever
 8004bfe:	e7fe      	b.n	8004bfe <LoopForever>
  ldr   r0, =_estack
 8004c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c08:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8004c0c:	08004f38 	.word	0x08004f38
  ldr r2, =_sbss
 8004c10:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8004c14:	200003b8 	.word	0x200003b8

08004c18 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c18:	e7fe      	b.n	8004c18 <ADC_IRQHandler>
	...

08004c1c <malloc>:
 8004c1c:	4b02      	ldr	r3, [pc, #8]	@ (8004c28 <malloc+0xc>)
 8004c1e:	4601      	mov	r1, r0
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	f000 b82d 	b.w	8004c80 <_malloc_r>
 8004c26:	bf00      	nop
 8004c28:	2000000c 	.word	0x2000000c

08004c2c <free>:
 8004c2c:	4b02      	ldr	r3, [pc, #8]	@ (8004c38 <free+0xc>)
 8004c2e:	4601      	mov	r1, r0
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	f000 b903 	b.w	8004e3c <_free_r>
 8004c36:	bf00      	nop
 8004c38:	2000000c 	.word	0x2000000c

08004c3c <sbrk_aligned>:
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	4e0f      	ldr	r6, [pc, #60]	@ (8004c7c <sbrk_aligned+0x40>)
 8004c40:	460c      	mov	r4, r1
 8004c42:	6831      	ldr	r1, [r6, #0]
 8004c44:	4605      	mov	r5, r0
 8004c46:	b911      	cbnz	r1, 8004c4e <sbrk_aligned+0x12>
 8004c48:	f000 f8ae 	bl	8004da8 <_sbrk_r>
 8004c4c:	6030      	str	r0, [r6, #0]
 8004c4e:	4621      	mov	r1, r4
 8004c50:	4628      	mov	r0, r5
 8004c52:	f000 f8a9 	bl	8004da8 <_sbrk_r>
 8004c56:	1c43      	adds	r3, r0, #1
 8004c58:	d103      	bne.n	8004c62 <sbrk_aligned+0x26>
 8004c5a:	f04f 34ff 	mov.w	r4, #4294967295
 8004c5e:	4620      	mov	r0, r4
 8004c60:	bd70      	pop	{r4, r5, r6, pc}
 8004c62:	1cc4      	adds	r4, r0, #3
 8004c64:	f024 0403 	bic.w	r4, r4, #3
 8004c68:	42a0      	cmp	r0, r4
 8004c6a:	d0f8      	beq.n	8004c5e <sbrk_aligned+0x22>
 8004c6c:	1a21      	subs	r1, r4, r0
 8004c6e:	4628      	mov	r0, r5
 8004c70:	f000 f89a 	bl	8004da8 <_sbrk_r>
 8004c74:	3001      	adds	r0, #1
 8004c76:	d1f2      	bne.n	8004c5e <sbrk_aligned+0x22>
 8004c78:	e7ef      	b.n	8004c5a <sbrk_aligned+0x1e>
 8004c7a:	bf00      	nop
 8004c7c:	20000270 	.word	0x20000270

08004c80 <_malloc_r>:
 8004c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c84:	1ccd      	adds	r5, r1, #3
 8004c86:	f025 0503 	bic.w	r5, r5, #3
 8004c8a:	3508      	adds	r5, #8
 8004c8c:	2d0c      	cmp	r5, #12
 8004c8e:	bf38      	it	cc
 8004c90:	250c      	movcc	r5, #12
 8004c92:	2d00      	cmp	r5, #0
 8004c94:	4606      	mov	r6, r0
 8004c96:	db01      	blt.n	8004c9c <_malloc_r+0x1c>
 8004c98:	42a9      	cmp	r1, r5
 8004c9a:	d904      	bls.n	8004ca6 <_malloc_r+0x26>
 8004c9c:	230c      	movs	r3, #12
 8004c9e:	6033      	str	r3, [r6, #0]
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ca6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d7c <_malloc_r+0xfc>
 8004caa:	f000 f869 	bl	8004d80 <__malloc_lock>
 8004cae:	f8d8 3000 	ldr.w	r3, [r8]
 8004cb2:	461c      	mov	r4, r3
 8004cb4:	bb44      	cbnz	r4, 8004d08 <_malloc_r+0x88>
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f7ff ffbf 	bl	8004c3c <sbrk_aligned>
 8004cbe:	1c43      	adds	r3, r0, #1
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	d158      	bne.n	8004d76 <_malloc_r+0xf6>
 8004cc4:	f8d8 4000 	ldr.w	r4, [r8]
 8004cc8:	4627      	mov	r7, r4
 8004cca:	2f00      	cmp	r7, #0
 8004ccc:	d143      	bne.n	8004d56 <_malloc_r+0xd6>
 8004cce:	2c00      	cmp	r4, #0
 8004cd0:	d04b      	beq.n	8004d6a <_malloc_r+0xea>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	4639      	mov	r1, r7
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	eb04 0903 	add.w	r9, r4, r3
 8004cdc:	f000 f864 	bl	8004da8 <_sbrk_r>
 8004ce0:	4581      	cmp	r9, r0
 8004ce2:	d142      	bne.n	8004d6a <_malloc_r+0xea>
 8004ce4:	6821      	ldr	r1, [r4, #0]
 8004ce6:	1a6d      	subs	r5, r5, r1
 8004ce8:	4629      	mov	r1, r5
 8004cea:	4630      	mov	r0, r6
 8004cec:	f7ff ffa6 	bl	8004c3c <sbrk_aligned>
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d03a      	beq.n	8004d6a <_malloc_r+0xea>
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	442b      	add	r3, r5
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	bb62      	cbnz	r2, 8004d5c <_malloc_r+0xdc>
 8004d02:	f8c8 7000 	str.w	r7, [r8]
 8004d06:	e00f      	b.n	8004d28 <_malloc_r+0xa8>
 8004d08:	6822      	ldr	r2, [r4, #0]
 8004d0a:	1b52      	subs	r2, r2, r5
 8004d0c:	d420      	bmi.n	8004d50 <_malloc_r+0xd0>
 8004d0e:	2a0b      	cmp	r2, #11
 8004d10:	d917      	bls.n	8004d42 <_malloc_r+0xc2>
 8004d12:	1961      	adds	r1, r4, r5
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	6025      	str	r5, [r4, #0]
 8004d18:	bf18      	it	ne
 8004d1a:	6059      	strne	r1, [r3, #4]
 8004d1c:	6863      	ldr	r3, [r4, #4]
 8004d1e:	bf08      	it	eq
 8004d20:	f8c8 1000 	streq.w	r1, [r8]
 8004d24:	5162      	str	r2, [r4, r5]
 8004d26:	604b      	str	r3, [r1, #4]
 8004d28:	4630      	mov	r0, r6
 8004d2a:	f000 f82f 	bl	8004d8c <__malloc_unlock>
 8004d2e:	f104 000b 	add.w	r0, r4, #11
 8004d32:	1d23      	adds	r3, r4, #4
 8004d34:	f020 0007 	bic.w	r0, r0, #7
 8004d38:	1ac2      	subs	r2, r0, r3
 8004d3a:	bf1c      	itt	ne
 8004d3c:	1a1b      	subne	r3, r3, r0
 8004d3e:	50a3      	strne	r3, [r4, r2]
 8004d40:	e7af      	b.n	8004ca2 <_malloc_r+0x22>
 8004d42:	6862      	ldr	r2, [r4, #4]
 8004d44:	42a3      	cmp	r3, r4
 8004d46:	bf0c      	ite	eq
 8004d48:	f8c8 2000 	streq.w	r2, [r8]
 8004d4c:	605a      	strne	r2, [r3, #4]
 8004d4e:	e7eb      	b.n	8004d28 <_malloc_r+0xa8>
 8004d50:	4623      	mov	r3, r4
 8004d52:	6864      	ldr	r4, [r4, #4]
 8004d54:	e7ae      	b.n	8004cb4 <_malloc_r+0x34>
 8004d56:	463c      	mov	r4, r7
 8004d58:	687f      	ldr	r7, [r7, #4]
 8004d5a:	e7b6      	b.n	8004cca <_malloc_r+0x4a>
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	42a3      	cmp	r3, r4
 8004d62:	d1fb      	bne.n	8004d5c <_malloc_r+0xdc>
 8004d64:	2300      	movs	r3, #0
 8004d66:	6053      	str	r3, [r2, #4]
 8004d68:	e7de      	b.n	8004d28 <_malloc_r+0xa8>
 8004d6a:	230c      	movs	r3, #12
 8004d6c:	6033      	str	r3, [r6, #0]
 8004d6e:	4630      	mov	r0, r6
 8004d70:	f000 f80c 	bl	8004d8c <__malloc_unlock>
 8004d74:	e794      	b.n	8004ca0 <_malloc_r+0x20>
 8004d76:	6005      	str	r5, [r0, #0]
 8004d78:	e7d6      	b.n	8004d28 <_malloc_r+0xa8>
 8004d7a:	bf00      	nop
 8004d7c:	20000274 	.word	0x20000274

08004d80 <__malloc_lock>:
 8004d80:	4801      	ldr	r0, [pc, #4]	@ (8004d88 <__malloc_lock+0x8>)
 8004d82:	f000 b84b 	b.w	8004e1c <__retarget_lock_acquire_recursive>
 8004d86:	bf00      	nop
 8004d88:	200003b4 	.word	0x200003b4

08004d8c <__malloc_unlock>:
 8004d8c:	4801      	ldr	r0, [pc, #4]	@ (8004d94 <__malloc_unlock+0x8>)
 8004d8e:	f000 b846 	b.w	8004e1e <__retarget_lock_release_recursive>
 8004d92:	bf00      	nop
 8004d94:	200003b4 	.word	0x200003b4

08004d98 <memset>:
 8004d98:	4402      	add	r2, r0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d100      	bne.n	8004da2 <memset+0xa>
 8004da0:	4770      	bx	lr
 8004da2:	f803 1b01 	strb.w	r1, [r3], #1
 8004da6:	e7f9      	b.n	8004d9c <memset+0x4>

08004da8 <_sbrk_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	4d06      	ldr	r5, [pc, #24]	@ (8004dc4 <_sbrk_r+0x1c>)
 8004dac:	2300      	movs	r3, #0
 8004dae:	4604      	mov	r4, r0
 8004db0:	4608      	mov	r0, r1
 8004db2:	602b      	str	r3, [r5, #0]
 8004db4:	f7fd fdac 	bl	8002910 <_sbrk>
 8004db8:	1c43      	adds	r3, r0, #1
 8004dba:	d102      	bne.n	8004dc2 <_sbrk_r+0x1a>
 8004dbc:	682b      	ldr	r3, [r5, #0]
 8004dbe:	b103      	cbz	r3, 8004dc2 <_sbrk_r+0x1a>
 8004dc0:	6023      	str	r3, [r4, #0]
 8004dc2:	bd38      	pop	{r3, r4, r5, pc}
 8004dc4:	200003b0 	.word	0x200003b0

08004dc8 <__errno>:
 8004dc8:	4b01      	ldr	r3, [pc, #4]	@ (8004dd0 <__errno+0x8>)
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	2000000c 	.word	0x2000000c

08004dd4 <__libc_init_array>:
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8004e0c <__libc_init_array+0x38>)
 8004dd8:	4c0d      	ldr	r4, [pc, #52]	@ (8004e10 <__libc_init_array+0x3c>)
 8004dda:	1b64      	subs	r4, r4, r5
 8004ddc:	10a4      	asrs	r4, r4, #2
 8004dde:	2600      	movs	r6, #0
 8004de0:	42a6      	cmp	r6, r4
 8004de2:	d109      	bne.n	8004df8 <__libc_init_array+0x24>
 8004de4:	4d0b      	ldr	r5, [pc, #44]	@ (8004e14 <__libc_init_array+0x40>)
 8004de6:	4c0c      	ldr	r4, [pc, #48]	@ (8004e18 <__libc_init_array+0x44>)
 8004de8:	f000 f872 	bl	8004ed0 <_init>
 8004dec:	1b64      	subs	r4, r4, r5
 8004dee:	10a4      	asrs	r4, r4, #2
 8004df0:	2600      	movs	r6, #0
 8004df2:	42a6      	cmp	r6, r4
 8004df4:	d105      	bne.n	8004e02 <__libc_init_array+0x2e>
 8004df6:	bd70      	pop	{r4, r5, r6, pc}
 8004df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dfc:	4798      	blx	r3
 8004dfe:	3601      	adds	r6, #1
 8004e00:	e7ee      	b.n	8004de0 <__libc_init_array+0xc>
 8004e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e06:	4798      	blx	r3
 8004e08:	3601      	adds	r6, #1
 8004e0a:	e7f2      	b.n	8004df2 <__libc_init_array+0x1e>
 8004e0c:	08004f30 	.word	0x08004f30
 8004e10:	08004f30 	.word	0x08004f30
 8004e14:	08004f30 	.word	0x08004f30
 8004e18:	08004f34 	.word	0x08004f34

08004e1c <__retarget_lock_acquire_recursive>:
 8004e1c:	4770      	bx	lr

08004e1e <__retarget_lock_release_recursive>:
 8004e1e:	4770      	bx	lr

08004e20 <memcpy>:
 8004e20:	440a      	add	r2, r1
 8004e22:	4291      	cmp	r1, r2
 8004e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e28:	d100      	bne.n	8004e2c <memcpy+0xc>
 8004e2a:	4770      	bx	lr
 8004e2c:	b510      	push	{r4, lr}
 8004e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e36:	4291      	cmp	r1, r2
 8004e38:	d1f9      	bne.n	8004e2e <memcpy+0xe>
 8004e3a:	bd10      	pop	{r4, pc}

08004e3c <_free_r>:
 8004e3c:	b538      	push	{r3, r4, r5, lr}
 8004e3e:	4605      	mov	r5, r0
 8004e40:	2900      	cmp	r1, #0
 8004e42:	d041      	beq.n	8004ec8 <_free_r+0x8c>
 8004e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e48:	1f0c      	subs	r4, r1, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bfb8      	it	lt
 8004e4e:	18e4      	addlt	r4, r4, r3
 8004e50:	f7ff ff96 	bl	8004d80 <__malloc_lock>
 8004e54:	4a1d      	ldr	r2, [pc, #116]	@ (8004ecc <_free_r+0x90>)
 8004e56:	6813      	ldr	r3, [r2, #0]
 8004e58:	b933      	cbnz	r3, 8004e68 <_free_r+0x2c>
 8004e5a:	6063      	str	r3, [r4, #4]
 8004e5c:	6014      	str	r4, [r2, #0]
 8004e5e:	4628      	mov	r0, r5
 8004e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e64:	f7ff bf92 	b.w	8004d8c <__malloc_unlock>
 8004e68:	42a3      	cmp	r3, r4
 8004e6a:	d908      	bls.n	8004e7e <_free_r+0x42>
 8004e6c:	6820      	ldr	r0, [r4, #0]
 8004e6e:	1821      	adds	r1, r4, r0
 8004e70:	428b      	cmp	r3, r1
 8004e72:	bf01      	itttt	eq
 8004e74:	6819      	ldreq	r1, [r3, #0]
 8004e76:	685b      	ldreq	r3, [r3, #4]
 8004e78:	1809      	addeq	r1, r1, r0
 8004e7a:	6021      	streq	r1, [r4, #0]
 8004e7c:	e7ed      	b.n	8004e5a <_free_r+0x1e>
 8004e7e:	461a      	mov	r2, r3
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	b10b      	cbz	r3, 8004e88 <_free_r+0x4c>
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	d9fa      	bls.n	8004e7e <_free_r+0x42>
 8004e88:	6811      	ldr	r1, [r2, #0]
 8004e8a:	1850      	adds	r0, r2, r1
 8004e8c:	42a0      	cmp	r0, r4
 8004e8e:	d10b      	bne.n	8004ea8 <_free_r+0x6c>
 8004e90:	6820      	ldr	r0, [r4, #0]
 8004e92:	4401      	add	r1, r0
 8004e94:	1850      	adds	r0, r2, r1
 8004e96:	4283      	cmp	r3, r0
 8004e98:	6011      	str	r1, [r2, #0]
 8004e9a:	d1e0      	bne.n	8004e5e <_free_r+0x22>
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	6053      	str	r3, [r2, #4]
 8004ea2:	4408      	add	r0, r1
 8004ea4:	6010      	str	r0, [r2, #0]
 8004ea6:	e7da      	b.n	8004e5e <_free_r+0x22>
 8004ea8:	d902      	bls.n	8004eb0 <_free_r+0x74>
 8004eaa:	230c      	movs	r3, #12
 8004eac:	602b      	str	r3, [r5, #0]
 8004eae:	e7d6      	b.n	8004e5e <_free_r+0x22>
 8004eb0:	6820      	ldr	r0, [r4, #0]
 8004eb2:	1821      	adds	r1, r4, r0
 8004eb4:	428b      	cmp	r3, r1
 8004eb6:	bf04      	itt	eq
 8004eb8:	6819      	ldreq	r1, [r3, #0]
 8004eba:	685b      	ldreq	r3, [r3, #4]
 8004ebc:	6063      	str	r3, [r4, #4]
 8004ebe:	bf04      	itt	eq
 8004ec0:	1809      	addeq	r1, r1, r0
 8004ec2:	6021      	streq	r1, [r4, #0]
 8004ec4:	6054      	str	r4, [r2, #4]
 8004ec6:	e7ca      	b.n	8004e5e <_free_r+0x22>
 8004ec8:	bd38      	pop	{r3, r4, r5, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000274 	.word	0x20000274

08004ed0 <_init>:
 8004ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed2:	bf00      	nop
 8004ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed6:	bc08      	pop	{r3}
 8004ed8:	469e      	mov	lr, r3
 8004eda:	4770      	bx	lr

08004edc <_fini>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	bf00      	nop
 8004ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee2:	bc08      	pop	{r3}
 8004ee4:	469e      	mov	lr, r3
 8004ee6:	4770      	bx	lr
